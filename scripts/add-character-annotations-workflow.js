// ADD VISUAL ANNOTATIONS TO GENERATED CHARACTER
// This node adds clear visual cues to the custom character generated by Gemini
// Position: After "Process Gemini API response and extract generated image"

const items = $input.all();
const results = [];

for (let i = 0; i < items.length; i++) {
  const item = items[i];
  
  // Get the binary image data
  const imageBuffer = await this.helpers.getBinaryDataBuffer(i, 'data');
  if (!imageBuffer || imageBuffer.length < 1000) {
    throw new Error('Invalid image data for annotation');
  }
  
  // Convert to base64 for processing
  const imageBase64 = imageBuffer.toString('base64');
  
  // Create annotated image using Canvas API (available in n8n)
  const canvas = new OffscreenCanvas(1024, 1024); // Standard size
  const ctx = canvas.getContext('2d');
  
  // Load the original image
  const img = new Image();
  img.src = `data:image/png;base64,${imageBase64}`;
  
  // Wait for image to load
  await new Promise((resolve) => {
    img.onload = resolve;
  });
  
  // Draw the original image
  ctx.drawImage(img, 0, 0, 1024, 1024);
  
  // Add green border (source indicator)
  ctx.strokeStyle = '#00FF00'; // Bright green
  ctx.lineWidth = 12;
  ctx.strokeRect(6, 6, 1012, 1012);
  
  // Add inner white border for contrast
  ctx.strokeStyle = '#FFFFFF';
  ctx.lineWidth = 4;
  ctx.strokeRect(12, 12, 1000, 1000);
  
  // Add "COPY THIS CHARACTER" text at top
  ctx.fillStyle = '#00FF00'; // Green background
  ctx.fillRect(200, 20, 624, 80);
  
  ctx.strokeStyle = '#FFFFFF';
  ctx.lineWidth = 3;
  ctx.strokeRect(200, 20, 624, 80);
  
  ctx.fillStyle = '#FFFFFF';
  ctx.font = 'bold 48px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('COPY THIS CHARACTER', 512, 75);
  
  // Add "SOURCE OF TRUTH" at bottom
  ctx.fillStyle = '#006600'; // Dark green background
  ctx.fillRect(300, 924, 424, 60);
  
  ctx.strokeStyle = '#FFFFFF';
  ctx.lineWidth = 2;
  ctx.strokeRect(300, 924, 424, 60);
  
  ctx.fillStyle = '#FFFFFF';
  ctx.font = 'bold 32px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('SOURCE OF TRUTH', 512, 965);
  
  // Convert canvas back to binary
  const annotatedImageData = canvas.transferToImageBitmap();
  
  // Convert to buffer
  const annotatedBuffer = Buffer.from(annotatedImageData);
  
  // Prepare binary data for n8n
  const binaryData = await this.helpers.prepareBinaryData(
    annotatedBuffer, 
    'annotated-character.png', 
    'image/png'
  );
  
  // Return with all original metadata + annotated image
  results.push({
    json: {
      ...item.json,
      _annotated: true,
      _annotationVersion: 'V1_GREEN_BORDERS'
    },
    binary: {
      data: binaryData
    }
  });
}

return results;
