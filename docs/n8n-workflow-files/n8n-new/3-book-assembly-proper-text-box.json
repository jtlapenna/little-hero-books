{
  "name": "3. Book Assembly - Proper Text Box (4-Page Test)",
  "nodes": [
    {
      "id": "1",
      "name": "Get Order Ready for Assembly",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "functionCode": "// Get order ready for book assembly\nconst orderData = $input.first().json;\n\n// Check if order is ready for book assembly\nif (orderData.status !== 'ready_for_book_assembly') {\n  return []; // Skip if not ready\n}\n\n// Update order status to assembling\nconst assemblingOrder = {\n  ...orderData,\n  status: 'book_assembly_in_progress',\n  assemblyStartedAt: new Date().toISOString(),\n  pagesGenerated: 0,\n  totalPagesRequired: 4, // 4 pages for testing\n  assemblyProgress: 0\n};\n\nconsole.log(`Starting book assembly for order: ${orderData.amazonOrderId}`);\nreturn [{ json: assemblingOrder }];"
      }
    },
    {
      "id": "2",
      "name": "Load Generated Characters",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "parameters": {
        "functionCode": "// Load all generated character images for the order\nconst orderData = $input.first().json;\n\n// Load base character and all 4 poses\nconst characterImages = {\n  base: `https://little-hero-assets.r2.cloudflarestorage.com/characters/${orderData.characterHash}/base-character.png`,\n  poses: []\n};\n\n// Load all pose images (1-4)\nfor (let i = 1; i <= 4; i++) {\n  characterImages.poses.push({\n    poseNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/characters/${orderData.characterHash}/characters_${orderData.characterHash}_pose${i.toString().padStart(2, '0')}.png`,\n    pageNumber: i\n  });\n}\n\nconst orderWithCharacters = {\n  ...orderData,\n  characterImages: characterImages\n};\n\nconsole.log(`Loaded ${characterImages.poses.length} character poses for assembly`);\nreturn [{ json: orderWithCharacters }];"
      }
    },
    {
      "id": "3",
      "name": "Load Background Images",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300],
      "parameters": {
        "functionCode": "// Load all background images for the Footprints of Wonder story\nconst orderData = $input.first().json;\n\n// Load background images for all 4 pages\nconst backgroundImages = [];\nfor (let i = 1; i <= 4; i++) {\n  backgroundImages.push({\n    pageNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/backgrounds/page${i}_background.png`,\n    sceneName: getSceneName(i)\n  });\n}\n\nfunction getSceneName(pageNumber) {\n  const scenes = [\n    'garden_path_twilight', 'garden_gate_magical', 'forest_night', 'forest_clearing'\n  ];\n  return scenes[pageNumber - 1] || 'unknown';\n}\n\nconst orderWithBackgrounds = {\n  ...orderData,\n  backgroundImages: backgroundImages\n};\n\nconsole.log(`Loaded ${backgroundImages.length} background images for assembly`);\nreturn [{ json: orderWithBackgrounds }];"
      }
    },
    {
      "id": "4",
      "name": "Load Story Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "parameters": {
        "functionCode": "// Load story text for all pages with character personalization\nconst orderData = $input.first().json;\n\n// Load story text for all 4 pages\nconst storyTexts = [];\nfor (let i = 1; i <= 4; i++) {\n  storyTexts.push({\n    pageNumber: i,\n    text: getStoryText(i, orderData.characterSpecs.childName),\n    characterName: orderData.characterSpecs.childName\n  });\n}\n\nfunction getStoryText(pageNumber, childName) {\n  const storyLines = [\n    `Tonight the world felt soft and shimmery. On the path outside, ${childName} noticed tiny footprints glowing faintly, as if they were whispering, \"Follow me.\"`,\n    `The footprints curved around the garden gate and into the evening air that hummed with quiet magic. ${childName} took a brave step forward.`,\n    `Trees rose like friendly giants. Between fallen leaves, the footprints continuedâ€”steady and sureâ€”leading deeper, as if someone kind was waiting.`,\n    `In a clearing, the footprints paused. ${childName} stood still and listenedâ€”the forest sounded like a secret song just for them.`\n  ];\n  return storyLines[pageNumber - 1] || 'Adventure awaits!';\n}\n\nconst orderWithStory = {\n  ...orderData,\n  storyTexts: storyTexts\n};\n\nconsole.log(`Loaded story text for ${storyTexts.length} pages`);\nreturn [{ json: orderWithStory }];"
      }
    },
    {
      "id": "5",
      "name": "Initialize Page Generation Loop",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "parameters": {
        "functionCode": "// Initialize page generation loop for all 4 pages\nconst orderData = $input.first().json;\n\n// Create array of pages to generate (1-4)\nconst pagesToGenerate = [];\nfor (let i = 1; i <= 4; i++) {\n  const characterImage = orderData.characterImages.poses.find(p => p.pageNumber === i);\n  const backgroundImage = orderData.backgroundImages.find(b => b.pageNumber === i);\n  const storyText = orderData.storyTexts.find(s => s.pageNumber === i);\n  \n  pagesToGenerate.push({\n    ...orderData,\n    currentPageNumber: i,\n    pageStatus: 'pending',\n    pageGenerationAttempts: 0,\n    maxPageAttempts: 3,\n    characterImage: characterImage,\n    backgroundImage: backgroundImage,\n    storyText: storyText\n  });\n}\n\nconsole.log(`Initialized page generation for ${pagesToGenerate.length} pages`);\nreturn pagesToGenerate.map(page => ({ json: page }));"
      }
    },
    {
      "id": "6",
      "name": "Generate Page HTML",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300],
      "parameters": {
        "functionCode": "// Generate HTML for individual page with proper text box specifications\nconst pageData = $input.first().json;\n\n// Get positioning layout for this page\nconst layout = getPageLayout(pageData.currentPageNumber);\n\n// Create HTML template for the page with EXACT specifications from existing templates\nconst htmlTemplate = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Little Hero Book - Page ${pageData.currentPageNumber}</title>\n  <style>\n    @font-face {\n      font-family: 'CustomFont';\n      src: url('https://little-hero-assets.r2.cloudflarestorage.com/fonts/custom-font.ttf') format('truetype');\n    }\n    \n    @page {\n      size: 8.5in 8.5in;\n      margin: 0;\n    }\n    \n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'CustomFont', 'Arial', sans-serif;\n      width: 8.5in;\n      height: 8.5in;\n      position: relative;\n      overflow: hidden;\n    }\n    \n    .page {\n      width: 8.5in;\n      height: 8.5in;\n      position: relative;\n      background-image: url('${pageData.backgroundImage.imagePath}');\n      background-size: cover;\n      background-position: center;\n      background-repeat: no-repeat;\n    }\n    \n    /* LOCKED-IN TEXT BOX SPECIFICATIONS */\n    .text-box {\n      position: absolute;\n      left: 50%;\n      bottom: 3%;\n      width: 65%;\n      transform: translateX(-50%);\n      height: auto;\n      background-image: url('https://little-hero-assets.r2.cloudflarestorage.com/overlays/text-boxes/standard-box.png');\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n      padding: 40px 60px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    /* LOCKED-IN TEXT SPECIFICATIONS */\n    .text-content {\n      font-size: 20px;\n      line-height: 1.4;\n      letter-spacing: 1.5px;\n      color: #312116;\n      text-align: center;\n      font-weight: 400;\n    }\n    \n    .character {\n      position: absolute;\n      ${layout.character.position};\n      width: ${layout.character.width}px;\n      height: auto;\n      z-index: 100;\n    }\n    \n    .character img {\n      width: 100%;\n      height: auto;\n    }\n    \n    .debug-info {\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      background: rgba(255, 255, 255, 0.9);\n      padding: 15px;\n      border-radius: 8px;\n      font-size: 12px;\n      font-family: monospace;\n      max-width: 300px;\n      z-index: 1000;\n    }\n    \n    .debug-info h4 {\n      margin-bottom: 8px;\n      color: #333;\n    }\n    \n    .debug-info ul {\n      margin-left: 15px;\n    }\n    \n    .debug-info li {\n      margin-bottom: 3px;\n    }\n    \n    @media print {\n      .debug-info {\n        display: none;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"debug-info\">\n    <h4>ðŸŽ¨ Page ${pageData.currentPageNumber}</h4>\n    <ul>\n      <li>Background: ${pageData.backgroundImage.sceneName}</li>\n      <li>Text Box: 65% width, bottom 3%</li>\n      <li>Character: ${layout.character.position}</li>\n      <li>Font: 20px, 1.5px spacing</li>\n      <li>Size: 8.5\" Ã— 8.5\" (300 DPI)</li>\n    </ul>\n  </div>\n  \n  <div class=\"page\">\n    <div class=\"text-box\">\n      <div class=\"text-content\">${pageData.storyText.text}</div>\n    </div>\n    \n    <div class=\"character\">\n      <img src=\"${pageData.characterImage.imagePath}\" alt=\"Character\">\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nconst pageResult = {\n  ...pageData,\n  html: htmlTemplate,\n  layout: layout,\n  generatedAt: new Date().toISOString()\n};\n\nconsole.log(`Generated HTML for page ${pageData.currentPageNumber}`);\nreturn [{ json: pageResult }];\n\n// Dynamic positioning function for characters\nfunction getPageLayout(pageNumber) {\n  const layouts = {\n    1: { // Garden path twilight\n      character: { position: 'right: 5%; top: 15%;', width: 300 }\n    },\n    2: { // Garden gate magical\n      character: { position: 'left: 5%; top: 20%;', width: 280 }\n    },\n    3: { // Forest night\n      character: { position: 'right: 8%; top: 10%;', width: 320 }\n    },\n    4: { // Forest clearing\n      character: { position: 'left: 8%; top: 15%;', width: 300 }\n    }\n  };\n  \n  return layouts[pageNumber] || layouts[1]; // Default to first layout if not found\n}"
      }
    },
    {
      "id": "7",
      "name": "Save HTML Page",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "parameters": {
        "functionCode": "// Save HTML page for testing (skip PDF generation for now)\nconst pageData = $input.first().json;\n\n// For now, just return the HTML data\n// In production, this would save to R2 or generate PDF\nconst savedPage = {\n  ...pageData,\n  htmlSaved: true,\n  savedAt: new Date().toISOString(),\n  pageUrl: `https://little-hero-assets.r2.cloudflarestorage.com/pages/${pageData.amazonOrderId}/page${pageData.currentPageNumber}.html`\n};\n\nconsole.log(`Saved HTML for page ${pageData.currentPageNumber}`);\nreturn [{ json: savedPage }];"
      }
    },
    {
      "id": "8",
      "name": "Update Page Progress",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300],
      "parameters": {
        "functionCode": "// Update page generation progress\nconst pageData = $input.first().json;\nconst orderData = $('Initialize Page Generation Loop').first().json;\n\n// Calculate progress\nconst pagesGenerated = orderData.pagesGenerated + 1;\nconst totalPages = orderData.totalPagesRequired;\nconst progress = Math.round((pagesGenerated / totalPages) * 100);\n\nconst updatedOrder = {\n  ...orderData,\n  pagesGenerated: pagesGenerated,\n  assemblyProgress: progress,\n  lastPageGenerated: orderData.currentPageNumber,\n  lastPageGeneratedAt: new Date().toISOString()\n};\n\n// Check if all pages are complete\nif (pagesGenerated >= totalPages) {\n  updatedOrder.status = 'pages_generated';\n  updatedOrder.pagesGeneratedAt = new Date().toISOString();\n  console.log(`All pages generated for order: ${orderData.amazonOrderId}`);\n} else {\n  console.log(`Page ${orderData.currentPageNumber} generated. Progress: ${progress}%`);\n}\n\nreturn [{ json: updatedOrder }];"
      }
    },
    {
      "id": "9",
      "name": "Log Assembly Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 300],
      "parameters": {
        "functionCode": "// Log assembly results for monitoring\nconst orderData = $input.first().json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  workflow: '3-book-assembly-proper-text-box',\n  orderId: orderData.amazonOrderId,\n  status: orderData.status,\n  pagesGenerated: orderData.pagesGenerated,\n  totalPagesRequired: orderData.totalPagesRequired,\n  assemblyProgress: orderData.assemblyProgress,\n  currentPageNumber: orderData.currentPageNumber,\n  pageStatus: orderData.pageStatus,\n  testMode: true\n};\n\nconsole.log('Book Assembly Results:', JSON.stringify(logEntry, null, 2));\nreturn [{ json: logEntry }];"
      }
    }
  ],
  "connections": {
    "Get Order Ready for Assembly": {
      "main": [
        [
          {
            "node": "Load Generated Characters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Generated Characters": {
      "main": [
        [
          {
            "node": "Load Background Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Background Images": {
      "main": [
        [
          {
            "node": "Load Story Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Story Text": {
      "main": [
        [
          {
            "node": "Initialize Page Generation Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Page Generation Loop": {
      "main": [
        [
          {
            "node": "Generate Page HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Page HTML": {
      "main": [
        [
          {
            "node": "Save HTML Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save HTML Page": {
      "main": [
        [
          {
            "node": "Update Page Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page Progress": {
      "main": [
        [
          {
            "node": "Log Assembly Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
