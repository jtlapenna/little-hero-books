{
  "name": "Workflow 2B: Poll & Retrieve Bria Images (No Fallbacks - Human Intervention)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "workflow-2b-trigger",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger-001",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "workflow-2b-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate submissions array from webhook payload\nconst input = $input.first().json;\n\n// Handle both direct submissions and webhook body structure\nconst submissions = input.body?.submissions || input.submissions || [];\nconst orderData = input.body?.orderData || input.orderData || {};\n\nconsole.log('=== WORKFLOW 2B STARTED ===');\nconsole.log('Input structure:', Object.keys(input));\nconsole.log(`Processing ${submissions.length} submissions`);\nconsole.log(`Order: ${orderData.amazonOrderId || 'UNKNOWN'}`);\nconsole.log('============================');\n\n// Validate that we have submissions\nif (submissions.length === 0) {\n  console.error('No submissions found!');\n  console.error('Checked paths: input.body.submissions and input.submissions');\n  console.error('Available input keys:', Object.keys(input));\n  if (input.body) {\n    console.error('Body keys:', Object.keys(input.body));\n  }\n  throw new Error('No submissions received from Workflow 2A');\n}\n\n// Validate orderData\nif (!orderData.amazonOrderId || !orderData.characterHash) {\n  console.warn('⚠️ orderData missing or incomplete - may cause issues in Workflow 3');\n  console.warn('Available orderData fields:', Object.keys(orderData));\n}\n\n// Check first submission has required fields\nconst firstSubmission = submissions[0];\nconsole.log('First submission fields:', Object.keys(firstSubmission));\n\n// Required fields for polling\nconst requiredFields = ['requestId', 'statusUrl'];\nconst missingFields = requiredFields.filter(field => !firstSubmission[field]);\n\nif (missingFields.length > 0) {\n  console.error('❌ Missing required fields:', missingFields);\n  console.error('Available fields:', Object.keys(firstSubmission));\n  throw new Error(`Submissions missing required fields: ${missingFields.join(', ')}`);\n}\n\nconsole.log('✓ All submissions have required fields');\nconsole.log('✓ orderData validated');\n\n// Return each submission as a separate item with orderData preserved\n// Also normalize field names (poseNumber vs currentPoseNumber)\nreturn submissions.map(s => ({ \n  json: {\n    ...s,\n    currentPoseNumber: s.currentPoseNumber || s.poseNumber, // Handle both field names\n    orderData: orderData,\n    retryCount: 0,\n    maxRetries: 5\n  }\n}));"
      },
      "id": "parse-submissions-002",
      "name": "Parse Submissions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Poll status for each submission\nconst item = $input.first().json;\nconst statusUrl = item.statusUrl;\nconst requestId = item.requestId;\nconst poseNumber = item.currentPoseNumber;\n\nconsole.log(`[${poseNumber}] Checking status for request: ${requestId}`);\n\nreturn [{\n  json: {\n    ...item,\n    needsStatusCheck: true\n  }\n}];"
      },
      "id": "prepare-status-check-003",
      "name": "Prepare Status Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.statusUrl }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_token",
              "value": "={{ $credentials.briaApiToken }}"
            }
          ]
        },
        "options": {}
      },
      "id": "check-status-004",
      "name": "Check Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "bria-api-credentials",
          "name": "Bria API Token"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Bria status response\nconst item = $input.first().json;\nconst originalData = item;\nconst briaResponse = item;\n\nconst status = briaResponse.status || 'UNKNOWN';\nconst poseNumber = originalData.currentPoseNumber;\n\nconsole.log(`[${poseNumber}] Status: ${status}`);\n\n// Determine next action based on status\nlet shouldDownload = false;\nlet shouldRetry = false;\nlet shouldNotifyHuman = false;\nlet resultUrl = null;\n\nif (status === 'COMPLETED' || status === 'SUCCESS') {\n  shouldDownload = true;\n  resultUrl = briaResponse.result_url || briaResponse.url;\n  console.log(`[${poseNumber}] ✓ Ready for download`);\n} else if (status === 'IN_PROGRESS' || status === 'PROCESSING') {\n  shouldRetry = originalData.retryCount < originalData.maxRetries;\n  if (shouldRetry) {\n    console.log(`[${poseNumber}] ⏳ Still processing, will retry (${originalData.retryCount + 1}/${originalData.maxRetries})`);\n  } else {\n    console.log(`[${poseNumber}] ❌ Max retries exceeded - NEEDS HUMAN INTERVENTION`);\n    shouldNotifyHuman = true;\n  }\n} else if (status === 'ERROR' || status === 'FAILED') {\n  console.log(`[${poseNumber}] ❌ Processing failed - NEEDS HUMAN INTERVENTION`);\n  shouldNotifyHuman = true;\n} else {\n  console.log(`[${poseNumber}] ⚠️ Unknown status: ${status} - NEEDS HUMAN INTERVENTION`);\n  shouldNotifyHuman = true;\n}\n\nreturn [{\n  json: {\n    ...originalData,\n    briaStatus: status,\n    resultUrl: resultUrl,\n    shouldDownload: shouldDownload,\n    shouldRetry: shouldRetry,\n    shouldNotifyHuman: shouldNotifyHuman,\n    statusCheckedAt: new Date().toISOString()\n  }\n}];"
      },
      "id": "parse-status-005",
      "name": "Parse Status Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldDownload }}",
              "value2": true
            }
          ]
        }
      },
      "id": "route-by-status-006",
      "name": "Route By Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.resultUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download-image-007",
      "name": "Download Processed Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "jsCode": "// Store downloaded image and prepare for upload\nconst item = $input.first();\nconst poseNumber = item.json.currentPoseNumber;\nconst orderData = item.json.orderData;\n\n// Get binary data\nconst binaryData = item.binary?.data;\n\nif (!binaryData) {\n  throw new Error(`No binary data received for pose ${poseNumber}`);\n}\n\nconsole.log(`[${poseNumber}] ✓ Downloaded image (${binaryData.fileSize || 'unknown'} bytes)`);\n\n// Prepare for R2 upload with consistent naming\nconst fileName = `character_pose_${poseNumber}_processed.png`;\nconst characterHash = orderData?.characterHash || 'unknown';\nconst r2Path = `characters/${characterHash}/${fileName}`;\n\nreturn [{\n  json: {\n    ...item.json,\n    fileName: fileName,\n    r2Path: r2Path,\n    processedWithBria: true,\n    processingError: false,\n    downloadedAt: new Date().toISOString()\n  },\n  binary: {\n    data: binaryData\n  }\n}];"
      },
      "id": "prepare-upload-008",
      "name": "Prepare for R2 Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "={{ $json.orderData.r2BucketName || 'little-hero-assets' }}",
        "fileName": "={{ $json.r2Path }}",
        "binaryData": true,
        "additionalFields": {
          "contentType": "image/png"
        }
      },
      "id": "upload-to-r2-009",
      "name": "Upload to R2",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [2000, 200],
      "credentials": {
        "s3": {
          "id": "cloudflare-r2-credentials",
          "name": "Cloudflare R2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Clean up binary after upload\nconst item = $input.first().json;\nconst poseNumber = item.currentPoseNumber;\n\nconsole.log(`[${poseNumber}] ✓ Uploaded to R2: ${item.r2Path}`);\n\nreturn [{\n  json: {\n    ...item,\n    uploadComplete: true,\n    fileUrl: `https://pub-92cec53654f84771956bc84dfea65baa.r2.dev/${item.r2Path}`\n  }\n}];"
      },
      "id": "clean-binary-010",
      "name": "Clean Binary After Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldNotifyHuman }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-error-011",
      "name": "Check If Error Needs Human",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 400]
    },
    {
      "parameters": {
        "jsCode": "// Create error notification for human intervention\nconst item = $input.first().json;\nconst poseNumber = item.currentPoseNumber;\nconst orderData = item.orderData;\n\nconsole.log(`[${poseNumber}] 🚨 CREATING ERROR NOTIFICATION FOR HUMAN`);\n\nconst errorDetails = {\n  errorType: 'BRIA_PROCESSING_FAILED',\n  poseNumber: poseNumber,\n  orderId: orderData?.amazonOrderId || 'UNKNOWN',\n  characterHash: orderData?.characterHash || 'UNKNOWN',\n  briaRequestId: item.requestId,\n  briaStatusUrl: item.statusUrl,\n  briaStatus: item.briaStatus,\n  retryCount: item.retryCount,\n  maxRetries: item.maxRetries,\n  timestamp: new Date().toISOString(),\n  \n  // Human-readable message\n  message: `Background removal failed for pose ${poseNumber} in order ${orderData?.amazonOrderId}. Status: ${item.briaStatus}. Retries attempted: ${item.retryCount}/${item.maxRetries}.`,\n  \n  // Action required\n  actionRequired: 'Manual background removal or image regeneration needed',\n  \n  // Links for quick access\n  briaStatusLink: item.statusUrl,\n  orderLink: `https://your-admin-panel.com/orders/${orderData?.amazonOrderId}`\n};\n\nreturn [{\n  json: {\n    ...item,\n    fileName: null,\n    r2Path: null,\n    processedWithBria: false,\n    processingError: true,\n    errorDetails: errorDetails,\n    needsHumanIntervention: true\n  }\n}];"
      },
      "id": "create-error-012",
      "name": "Create Error Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "YOUR_ERROR_NOTIFICATION_WEBHOOK_OR_EMAIL_SERVICE",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.errorDetails) }}",
        "options": {}
      },
      "id": "send-error-notification-013",
      "name": "Send Error to Human",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 500],
      "notes": "Configure this to send to Slack, Email, or your preferred notification system"
    },
    {
      "parameters": {
        "jsCode": "// Mark error as notified\nconst item = $input.first().json;\nconst poseNumber = item.currentPoseNumber;\n\nconsole.log(`[${poseNumber}] ✓ Human notified of error`);\n\nreturn [{\n  json: {\n    ...item,\n    humanNotified: true,\n    notifiedAt: new Date().toISOString()\n  }\n}];"
      },
      "id": "mark-notified-014",
      "name": "Mark Human Notified",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 500]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldRetry }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-retry-015",
      "name": "Check Retry Limit",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 600]
    },
    {
      "parameters": {
        "jsCode": "// Calculate exponential backoff delay\nconst item = $input.first().json;\nconst retryCount = item.retryCount || 0;\n\n// Exponential backoff: 30s, 60s, 120s, 240s, 480s\nconst baseDelay = 30;\nconst delay = baseDelay * Math.pow(2, retryCount);\n\nconsole.log(`Retry ${retryCount + 1}: Waiting ${delay} seconds...`);\n\nreturn [{\n  json: {\n    ...item,\n    retryCount: retryCount + 1,\n    delaySeconds: delay\n  }\n}];"
      },
      "id": "calc-retry-delay-016",
      "name": "Calculate Retry Delay",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 700]
    },
    {
      "parameters": {
        "amount": "={{ $json.delaySeconds }}",
        "unit": "seconds"
      },
      "id": "wait-before-retry-017",
      "name": "Wait Before Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [2000, 700],
      "webhookId": "retry-wait-webhook"
    },
    {
      "parameters": {
        "url": "={{ $('Webhook Trigger').params.webhookUrl }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ submissions: [$json], orderData: $json.orderData }) }}",
        "options": {}
      },
      "id": "retry-workflow-018",
      "name": "Retry Workflow B",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2220, 700]
    },
    {
      "parameters": {
        "jsCode": "// Max retries exceeded - send to error handling\nconst item = $input.first().json;\nconst poseNumber = item.currentPoseNumber;\n\nconsole.log(`[${poseNumber}] ❌ Max retries (${item.maxRetries}) exceeded`);\n\nreturn [{\n  json: {\n    ...item,\n    shouldNotifyHuman: true,\n    briaStatus: 'MAX_RETRIES_EXCEEDED'\n  }\n}];"
      },
      "id": "max-retries-019",
      "name": "Max Retries Exceeded",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 800]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "merge-results-020",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [2440, 400]
    },
    {
      "parameters": {
        "jsCode": "// Generate final summary with error handling\nconst items = $input.all();\nconst orderData = items[0]?.json?.orderData || {};\n\nconsole.log('\\n=== WORKFLOW 2B COMPLETE ===');\nconsole.log(`Total items processed: ${items.length}`);\n\nconst processedImages = items.map(item => ({\n  poseNumber: item.json.currentPoseNumber,\n  fileName: item.json.fileName,\n  r2Path: item.json.r2Path,\n  fileUrl: item.json.fileUrl,\n  briaProcessed: item.json.processedWithBria || false,\n  processingError: item.json.processingError || false,\n  needsHumanIntervention: item.json.needsHumanIntervention || false,\n  briaStatus: item.json.briaStatus\n}));\n\nconst stats = {\n  totalProcessed: items.length,\n  successfulBria: processedImages.filter(i => i.briaProcessed).length,\n  errors: processedImages.filter(i => i.processingError).length,\n  needingHumanIntervention: processedImages.filter(i => i.needsHumanIntervention).length\n};\n\nconsole.log(`✓ Bria processed: ${stats.successfulBria}`);\nconsole.log(`❌ Errors: ${stats.errors}`);\nconsole.log(`🚨 Need human intervention: ${stats.needingHumanIntervention}`);\nconsole.log('===========================\\n');\n\n// Determine if workflow can proceed to Workflow 3\nconst canProceed = stats.errors === 0;\n\nif (!canProceed) {\n  console.error('⚠️ CANNOT PROCEED TO WORKFLOW 3 - Errors require human intervention');\n}\n\nreturn [{\n  json: {\n    orderData: orderData,\n    processedImages: processedImages,\n    ...stats,\n    completedAt: new Date().toISOString(),\n    workflow2BComplete: true,\n    canProceedToWorkflow3: canProceed,\n    errors: canProceed ? null : processedImages.filter(i => i.processingError)\n  }\n}];"
      },
      "id": "generate-summary-021",
      "name": "Generate Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2660, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.canProceedToWorkflow3 }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-can-proceed-022",
      "name": "Can Proceed to Workflow 3?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2880, 400]
    },
    {
      "parameters": {
        "url": "YOUR_WORKFLOW_3_WEBHOOK_URL_HERE",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "trigger-workflow-3-023",
      "name": "Trigger Workflow 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "jsCode": "// Cannot proceed - log and notify\nconst summary = $input.first().json;\n\nconsole.log('🛑 WORKFLOW STOPPED - Human intervention required');\nconsole.log(`Order: ${summary.orderData?.amazonOrderId}`);\nconsole.log(`Errors: ${summary.errors?.length || 0}`);\n\nreturn [{\n  json: {\n    ...summary,\n    workflow3Triggered: false,\n    workflowStopped: true,\n    stopReason: 'Errors require human intervention before proceeding'\n  }\n}];"
      },
      "id": "cannot-proceed-024",
      "name": "Cannot Proceed - Notify",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: $json.canProceedToWorkflow3, message: $json.canProceedToWorkflow3 ? 'Workflow 2B completed successfully' : 'Workflow 2B completed with errors - human intervention required', processed: $json.totalProcessed, briaSuccess: $json.successfulBria, errors: $json.errors, workflow3Triggered: $json.workflow3Triggered || false } }}"
      },
      "id": "respond-to-webhook-025",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3320, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{ "node": "Parse Submissions", "type": "main", "index": 0 }]]
    },
    "Parse Submissions": {
      "main": [[{ "node": "Prepare Status Check", "type": "main", "index": 0 }]]
    },
    "Prepare Status Check": {
      "main": [[{ "node": "Check Status", "type": "main", "index": 0 }]]
    },
    "Check Status": {
      "main": [[{ "node": "Parse Status Response", "type": "main", "index": 0 }]]
    },
    "Parse Status Response": {
      "main": [[{ "node": "Route By Status", "type": "main", "index": 0 }]]
    },
    "Route By Status": {
      "main": [
        [{ "node": "Download Processed Image", "type": "main", "index": 0 }],
        [
          { "node": "Check If Error Needs Human", "type": "main", "index": 0 },
          { "node": "Check Retry Limit", "type": "main", "index": 0 }
        ]
      ]
    },
    "Download Processed Image": {
      "main": [[{ "node": "Prepare for R2 Upload", "type": "main", "index": 0 }]]
    },
    "Prepare for R2 Upload": {
      "main": [[{ "node": "Upload to R2", "type": "main", "index": 0 }]]
    },
    "Upload to R2": {
      "main": [[{ "node": "Clean Binary After Upload", "type": "main", "index": 0 }]]
    },
    "Clean Binary After Upload": {
      "main": [[{ "node": "Merge All Results", "type": "main", "index": 0 }]]
    },
    "Check If Error Needs Human": {
      "main": [[{ "node": "Create Error Notification", "type": "main", "index": 0 }]]
    },
    "Create Error Notification": {
      "main": [[{ "node": "Send Error to Human", "type": "main", "index": 0 }]]
    },
    "Send Error to Human": {
      "main": [[{ "node": "Mark Human Notified", "type": "main", "index": 0 }]]
    },
    "Mark Human Notified": {
      "main": [[{ "node": "Merge All Results", "type": "main", "index": 1 }]]
    },
    "Check Retry Limit": {
      "main": [
        [{ "node": "Calculate Retry Delay", "type": "main", "index": 0 }],
        [{ "node": "Max Retries Exceeded", "type": "main", "index": 0 }]
      ]
    },
    "Calculate Retry Delay": {
      "main": [[{ "node": "Wait Before Retry", "type": "main", "index": 0 }]]
    },
    "Wait Before Retry": {
      "main": [[{ "node": "Retry Workflow B", "type": "main", "index": 0 }]]
    },
    "Max Retries Exceeded": {
      "main": [[{ "node": "Check If Error Needs Human", "type": "main", "index": 0 }]]
    },
    "Merge All Results": {
      "main": [[{ "node": "Generate Summary", "type": "main", "index": 0 }]]
    },
    "Generate Summary": {
      "main": [[{ "node": "Can Proceed to Workflow 3?", "type": "main", "index": 0 }]]
    },
    "Can Proceed to Workflow 3?": {
      "main": [
        [{ "node": "Trigger Workflow 3", "type": "main", "index": 0 }],
        [{ "node": "Cannot Proceed - Notify", "type": "main", "index": 0 }]
      ]
    },
    "Trigger Workflow 3": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    },
    "Cannot Proceed - Notify": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "no-fallbacks-human-intervention-v1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "your-n8n-instance-id"
  },
  "tags": []
}
