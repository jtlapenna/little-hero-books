{
  "name": "6. Monitoring & Alerts",
  "nodes": [
    {
      "id": "1",
      "name": "Cron Trigger (Every 5 minutes)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      }
    },
    {
      "id": "2",
      "name": "Check System Health",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "parameters": {
        "functionCode": "// Check overall system health\nconst healthChecks = {\n  timestamp: new Date().toISOString(),\n  systemStatus: 'operational',\n  checks: {}\n};\n\n// Check n8n instance health\nhealthChecks.checks.n8n = {\n  status: 'healthy',\n  responseTime: Math.random() * 100 + 50, // Simulated response time\n  lastExecution: new Date(Date.now() - Math.random() * 300000).toISOString(), // Within last 5 minutes\n  errorRate: Math.random() * 0.05 // 0-5% error rate\n};\n\n// Check database connectivity\nhealthChecks.checks.database = {\n  status: 'healthy',\n  responseTime: Math.random() * 50 + 10,\n  connectionPool: Math.floor(Math.random() * 20) + 5,\n  activeQueries: Math.floor(Math.random() * 10)\n};\n\n// Check external API health\nhealthChecks.checks.openai = {\n  status: Math.random() > 0.1 ? 'healthy' : 'degraded',\n  responseTime: Math.random() * 2000 + 500,\n  rateLimitRemaining: Math.floor(Math.random() * 1000) + 100,\n  lastError: Math.random() > 0.8 ? 'Rate limit exceeded' : null\n};\n\nhealthChecks.checks.lulu = {\n  status: Math.random() > 0.05 ? 'healthy' : 'degraded',\n  responseTime: Math.random() * 1500 + 300,\n  lastError: Math.random() > 0.9 ? 'Authentication failed' : null\n};\n\nhealthChecks.checks.cloudflareR2 = {\n  status: 'healthy',\n  responseTime: Math.random() * 100 + 50,\n  storageUsed: Math.random() * 1000000000 + 500000000, // 500MB - 1.5GB\n  requestsPerMinute: Math.floor(Math.random() * 100) + 10\n};\n\n// Calculate overall system status\nconst unhealthyServices = Object.values(healthChecks.checks).filter(check => check.status !== 'healthy');\nif (unhealthyServices.length > 0) {\n  healthChecks.systemStatus = unhealthyServices.length === 1 ? 'degraded' : 'critical';\n}\n\nconsole.log(`System health check: ${healthChecks.systemStatus}`);\nreturn [{ json: healthChecks }];"
      }
    },
    {
      "id": "3",
      "name": "Monitor API Costs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300],
      "parameters": {
        "functionCode": "// Monitor API costs and usage\nconst costMonitoring = {\n  timestamp: new Date().toISOString(),\n  period: 'last_24_hours',\n  totalCost: 0,\n  services: {}\n};\n\n// OpenAI costs (simulated)\nconst openaiCosts = {\n  service: 'OpenAI GPT-4 Vision',\n  requests: Math.floor(Math.random() * 100) + 50,\n  costPerRequest: 0.01,\n  totalCost: 0\n};\nopenaiCosts.totalCost = openaiCosts.requests * openaiCosts.costPerRequest;\ncostMonitoring.services.openai = openaiCosts;\ncostMonitoring.totalCost += openaiCosts.totalCost;\n\n// Remove.bg costs (simulated)\nconst removeBgCosts = {\n  service: 'Remove.bg API',\n  requests: Math.floor(Math.random() * 200) + 100,\n  costPerRequest: 0.02,\n  totalCost: 0\n};\nremoveBgCosts.totalCost = removeBgCosts.requests * removeBgCosts.costPerRequest;\ncostMonitoring.services.removebg = removeBgCosts;\ncostMonitoring.totalCost += removeBgCosts.totalCost;\n\n// Lulu costs (simulated)\nconst luluCosts = {\n  service: 'Lulu Print-on-Demand',\n  orders: Math.floor(Math.random() * 20) + 10,\n  costPerOrder: 5.50,\n  totalCost: 0\n};\nluluCosts.totalCost = luluCosts.orders * luluCosts.costPerOrder;\ncostMonitoring.services.lulu = luluCosts;\ncostMonitoring.totalCost += luluCosts.totalCost;\n\n// Cloudflare R2 costs (simulated)\nconst r2Costs = {\n  service: 'Cloudflare R2 Storage',\n  storageGB: Math.random() * 10 + 5,\n  requests: Math.floor(Math.random() * 1000) + 500,\n  costPerGB: 0.015,\n  costPerRequest: 0.0004,\n  totalCost: 0\n};\nr2Costs.totalCost = (r2Costs.storageGB * r2Costs.costPerGB) + (r2Costs.requests * r2Costs.costPerRequest);\ncostMonitoring.services.cloudflareR2 = r2Costs;\ncostMonitoring.totalCost += r2Costs.totalCost;\n\n// Check for cost anomalies\nconst dailyBudget = 50; // $50 daily budget\ncostMonitoring.budgetExceeded = costMonitoring.totalCost > dailyBudget;\ncostMonitoring.budgetUtilization = (costMonitoring.totalCost / dailyBudget) * 100;\n\nconsole.log(`API costs: $${costMonitoring.totalCost.toFixed(2)} (${costMonitoring.budgetUtilization.toFixed(1)}% of budget)`);\nreturn [{ json: costMonitoring }];"
      }
    },
    {
      "id": "4",
      "name": "Check Queue Status",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "parameters": {
        "functionCode": "// Check processing queue status\nconst queueStatus = {\n  timestamp: new Date().toISOString(),\n  queues: {}\n};\n\n// Order intake queue\nqueueStatus.queues.orderIntake = {\n  name: 'Order Intake',\n  pending: Math.floor(Math.random() * 5),\n  processing: Math.floor(Math.random() * 3) + 1,\n  completed: Math.floor(Math.random() * 20) + 10,\n  failed: Math.floor(Math.random() * 2),\n  averageProcessingTime: Math.floor(Math.random() * 300) + 60 // 1-6 minutes\n};\n\n// AI generation queue\nqueueStatus.queues.aiGeneration = {\n  name: 'AI Character Generation',\n  pending: Math.floor(Math.random() * 3),\n  processing: Math.floor(Math.random() * 2) + 1,\n  completed: Math.floor(Math.random() * 15) + 5,\n  failed: Math.floor(Math.random() * 1),\n  averageProcessingTime: Math.floor(Math.random() * 1800) + 600 // 10-40 minutes\n};\n\n// Book assembly queue\nqueueStatus.queues.bookAssembly = {\n  name: 'Book Assembly',\n  pending: Math.floor(Math.random() * 2),\n  processing: Math.floor(Math.random() * 2),\n  completed: Math.floor(Math.random() * 12) + 3,\n  failed: Math.floor(Math.random() * 1),\n  averageProcessingTime: Math.floor(Math.random() * 600) + 300 // 5-15 minutes\n};\n\n// Print fulfillment queue\nqueueStatus.queues.printFulfillment = {\n  name: 'Print & Fulfillment',\n  pending: Math.floor(Math.random() * 3),\n  processing: Math.floor(Math.random() * 2),\n  completed: Math.floor(Math.random() * 8) + 2,\n  failed: Math.floor(Math.random() * 1),\n  averageProcessingTime: Math.floor(Math.random() * 1200) + 300 // 5-25 minutes\n};\n\n// Calculate overall queue health\nconst totalPending = Object.values(queueStatus.queues).reduce((sum, queue) => sum + queue.pending, 0);\nconst totalFailed = Object.values(queueStatus.queues).reduce((sum, queue) => sum + queue.failed, 0);\nconst totalProcessing = Object.values(queueStatus.queues).reduce((sum, queue) => sum + queue.processing, 0);\n\nqueueStatus.overall = {\n  totalPending: totalPending,\n  totalProcessing: totalProcessing,\n  totalFailed: totalFailed,\n  health: totalFailed > 3 ? 'critical' : totalPending > 10 ? 'degraded' : 'healthy'\n};\n\nconsole.log(`Queue status: ${queueStatus.overall.health} (${totalPending} pending, ${totalFailed} failed)`);\nreturn [{ json: queueStatus }];"
      }
    },
    {
      "id": "5",
      "name": "Validate Generated Images",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "parameters": {
        "functionCode": "// Validate recently generated images\nconst imageValidation = {\n  timestamp: new Date().toISOString(),\n  period: 'last_hour',\n  totalImages: 0,\n  validImages: 0,\n  invalidImages: 0,\n  qualityIssues: []\n};\n\n// Simulate image validation results\nconst totalImages = Math.floor(Math.random() * 50) + 20;\nconst invalidImages = Math.floor(Math.random() * 3);\nconst validImages = totalImages - invalidImages;\n\nimageValidation.totalImages = totalImages;\nimageValidation.validImages = validImages;\nimageValidation.invalidImages = invalidImages;\nimageValidation.successRate = (validImages / totalImages) * 100;\n\n// Simulate quality issues\nconst qualityIssues = [\n  'Low resolution',\n  'Missing transparency',\n  'Incorrect dimensions',\n  'Poor character consistency',\n  'Background removal failure'\n];\n\nfor (let i = 0; i < invalidImages; i++) {\n  imageValidation.qualityIssues.push({\n    imageId: `img_${Math.random().toString(36).substr(2, 9)}`,\n    issue: qualityIssues[Math.floor(Math.random() * qualityIssues.length)],\n    severity: Math.random() > 0.5 ? 'high' : 'medium',\n    detectedAt: new Date(Date.now() - Math.random() * 3600000).toISOString()\n  });\n}\n\n// Check for quality thresholds\nimageValidation.qualityAlert = imageValidation.successRate < 90;\nimageValidation.criticalIssues = imageValidation.qualityIssues.filter(issue => issue.severity === 'high').length;\n\nconsole.log(`Image validation: ${imageValidation.successRate.toFixed(1)}% success rate`);\nreturn [{ json: imageValidation }];"
      }
    },
    {
      "id": "6",
      "name": "Check Alert Conditions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300],
      "parameters": {
        "functionCode": "// Check for alert conditions across all monitoring data\nconst systemHealth = $('Check System Health').first().json;\nconst costMonitoring = $('Monitor API Costs').first().json;\nconst queueStatus = $('Check Queue Status').first().json;\nconst imageValidation = $('Validate Generated Images').first().json;\n\nconst alerts = [];\nconst alertLevel = 'info'; // info, warning, critical\n\n// System health alerts\nif (systemHealth.systemStatus === 'critical') {\n  alerts.push({\n    type: 'system_health',\n    level: 'critical',\n    message: 'System is in critical state',\n    details: systemHealth,\n    timestamp: new Date().toISOString()\n  });\n} else if (systemHealth.systemStatus === 'degraded') {\n  alerts.push({\n    type: 'system_health',\n    level: 'warning',\n    message: 'System performance is degraded',\n    details: systemHealth,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Cost alerts\nif (costMonitoring.budgetExceeded) {\n  alerts.push({\n    type: 'cost_alert',\n    level: 'critical',\n    message: `Daily budget exceeded: $${costMonitoring.totalCost.toFixed(2)}`,\n    details: costMonitoring,\n    timestamp: new Date().toISOString()\n  });\n} else if (costMonitoring.budgetUtilization > 80) {\n  alerts.push({\n    type: 'cost_alert',\n    level: 'warning',\n    message: `High budget utilization: ${costMonitoring.budgetUtilization.toFixed(1)}%`,\n    details: costMonitoring,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Queue alerts\nif (queueStatus.overall.health === 'critical') {\n  alerts.push({\n    type: 'queue_alert',\n    level: 'critical',\n    message: `Queue health is critical: ${queueStatus.overall.totalFailed} failed jobs`,\n    details: queueStatus,\n    timestamp: new Date().toISOString()\n  });\n} else if (queueStatus.overall.totalPending > 15) {\n  alerts.push({\n    type: 'queue_alert',\n    level: 'warning',\n    message: `High queue backlog: ${queueStatus.overall.totalPending} pending jobs`,\n    details: queueStatus,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Image quality alerts\nif (imageValidation.qualityAlert) {\n  alerts.push({\n    type: 'quality_alert',\n    level: 'warning',\n    message: `Image quality below threshold: ${imageValidation.successRate.toFixed(1)}% success rate`,\n    details: imageValidation,\n    timestamp: new Date().toISOString()\n  });\n}\n\nif (imageValidation.criticalIssues > 0) {\n  alerts.push({\n    type: 'quality_alert',\n    level: 'critical',\n    message: `${imageValidation.criticalIssues} critical image quality issues detected`,\n    details: imageValidation,\n    timestamp: new Date().toISOString()\n  });\n}\n\nconst alertSummary = {\n  timestamp: new Date().toISOString(),\n  totalAlerts: alerts.length,\n  criticalAlerts: alerts.filter(alert => alert.level === 'critical').length,\n  warningAlerts: alerts.filter(alert => alert.level === 'warning').length,\n  alerts: alerts\n};\n\nconsole.log(`Alert check: ${alertSummary.totalAlerts} alerts (${alertSummary.criticalAlerts} critical, ${alertSummary.warningAlerts} warnings)`);\nreturn [{ json: alertSummary }];"
      }
    },
    {
      "id": "7",
      "name": "Send Status Reports",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "parameters": {
        "functionCode": "// Send status reports to monitoring dashboard\nconst alertSummary = $input.first().json;\nconst systemHealth = $('Check System Health').first().json;\nconst costMonitoring = $('Monitor API Costs').first().json;\nconst queueStatus = $('Check Queue Status').first().json;\nconst imageValidation = $('Validate Generated Images').first().json;\n\nconst statusReport = {\n  timestamp: new Date().toISOString(),\n  systemHealth: systemHealth,\n  costMonitoring: costMonitoring,\n  queueStatus: queueStatus,\n  imageValidation: imageValidation,\n  alerts: alertSummary,\n  overallStatus: getOverallStatus(systemHealth, costMonitoring, queueStatus, imageValidation)\n};\n\nfunction getOverallStatus(health, costs, queues, images) {\n  if (health.systemStatus === 'critical' || costs.budgetExceeded || queues.overall.health === 'critical') {\n    return 'critical';\n  }\n  if (health.systemStatus === 'degraded' || costs.budgetUtilization > 80 || queues.overall.totalPending > 15 || images.qualityAlert) {\n    return 'warning';\n  }\n  return 'healthy';\n}\n\nconsole.log(`Status report generated: ${statusReport.overallStatus}`);\nreturn [{ json: statusReport }];"
      }
    },
    {
      "id": "8",
      "name": "Send Critical Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 200],
      "parameters": {
        "method": "POST",
        "url": "https://api.sendgrid.com/v3/mail/send",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "sendgridApi",
        "options": {
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "personalizations",
              "value": "=[{\n  \"to\": [{\"email\": \"admin@littleherobooks.com\"}],\n  \"subject\": \"🚨 CRITICAL ALERT - Little Hero Books System\"\n}]"
            },
            {
              "name": "from",
              "value": "={\n  \"email\": \"alerts@littleherobooks.com\",\n  \"name\": \"Little Hero Books Monitoring\"\n}"
            },
            {
              "name": "content",
              "value": "=[{\n  \"type\": \"text/html\",\n  \"value\": \"<h2>🚨 Critical System Alert</h2><p>Critical issues detected in the Little Hero Books system:</p><ul>{{ $json.alerts.alerts.filter(alert => alert.level === 'critical').map(alert => `<li><strong>${alert.type}:</strong> ${alert.message}</li>`).join('') }}</ul><p>Please investigate immediately.</p>\"\n}]"
            }
          ]
        }
      }
    },
    {
      "id": "9",
      "name": "Send Warning Alerts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300],
      "parameters": {
        "method": "POST",
        "url": "https://api.sendgrid.com/v3/mail/send",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "sendgridApi",
        "options": {
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "personalizations",
              "value": "=[{\n  \"to\": [{\"email\": \"admin@littleherobooks.com\"}],\n  \"subject\": \"⚠️ WARNING - Little Hero Books System\"\n}]"
            },
            {
              "name": "from",
              "value": "={\n  \"email\": \"alerts@littleherobooks.com\",\n  \"name\": \"Little Hero Books Monitoring\"\n}"
            },
            {
              "name": "content",
              "value": "=[{\n  \"type\": \"text/html\",\n  \"value\": \"<h2>⚠️ System Warning</h2><p>Warning conditions detected in the Little Hero Books system:</p><ul>{{ $json.alerts.alerts.filter(alert => alert.level === 'warning').map(alert => `<li><strong>${alert.type}:</strong> ${alert.message}</li>`).join('') }}</ul><p>Please monitor the situation.</p>\"\n}]"
            }
          ]
        }
      }
    },
    {
      "id": "10",
      "name": "Log Monitoring Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 300],
      "parameters": {
        "functionCode": "// Log monitoring results for analysis\nconst statusReport = $input.first().json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  workflow: '6-monitoring-alerts',\n  overallStatus: statusReport.overallStatus,\n  systemHealth: statusReport.systemHealth.systemStatus,\n  totalCost: statusReport.costMonitoring.totalCost,\n  budgetUtilization: statusReport.costMonitoring.budgetUtilization,\n  queueHealth: statusReport.queueStatus.overall.health,\n  totalPending: statusReport.queueStatus.overall.totalPending,\n  totalFailed: statusReport.queueStatus.overall.totalFailed,\n  imageSuccessRate: statusReport.imageValidation.successRate,\n  criticalIssues: statusReport.imageValidation.criticalIssues,\n  totalAlerts: statusReport.alerts.totalAlerts,\n  criticalAlerts: statusReport.alerts.criticalAlerts,\n  warningAlerts: statusReport.alerts.warningAlerts\n};\n\n// In production, this would write to a proper logging system\nconsole.log('Monitoring Results:', JSON.stringify(logEntry, null, 2));\n\nreturn [{ json: logEntry }];"
      }
    }
  ],
  "connections": {
    "Cron Trigger (Every 5 minutes)": {
      "main": [
        [
          {
            "node": "Check System Health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check System Health": {
      "main": [
        [
          {
            "node": "Monitor API Costs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor API Costs": {
      "main": [
        [
          {
            "node": "Check Queue Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Queue Status": {
      "main": [
        [
          {
            "node": "Validate Generated Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Generated Images": {
      "main": [
        [
          {
            "node": "Check Alert Conditions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Alert Conditions": {
      "main": [
        [
          {
            "node": "Send Status Reports",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Status Reports": {
      "main": [
        [
          {
            "node": "Send Critical Alerts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Warning Alerts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Monitoring Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Critical Alerts": {
      "main": [
        [
          {
            "node": "Log Monitoring Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Warning Alerts": {
      "main": [
        [
          {
            "node": "Log Monitoring Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
