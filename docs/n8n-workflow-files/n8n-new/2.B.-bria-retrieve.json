{
  "name": "LHB - 2.B.- Character Creation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bria-workflow-b",
        "options": {}
      },
      "id": "93452822-ddb4-4731-b059-6fdff23a863b",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2240,
        368
      ],
      "webhookId": "bria-workflow-b",
      "notes": "Receives submission data from Workflow A"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Parse Submissions (tolerant + normalized)\n * - Accepts multiple payload shapes (body.submissions, data.submissions, raw array, etc.)\n * - Never throws if requestId/statusUrl are missing\n * - Emits a uniform schema and marks items that need fallback\n */\n\nconst IN = $input.all().map(i => i.json);\n\n// Helpers\nconst get = (obj, path) => {\n  try {\n    return path.split('.').reduce((o, k) => (o == null ? undefined : o[k]), obj);\n  } catch { return undefined; }\n};\nconst looksLikeSubmission = (o) =>\n  o && typeof o === 'object' && (\n    'requestId' in o || 'request_id' in o || 'statusUrl' in o || 'status_url' in o ||\n    'characterPath' in o || 'poseNumber' in o || 'failed' in o\n  );\n\nfunction extractArrayPayload() {\n  // A) envelope styles\n  for (const item of IN) {\n    if (Array.isArray(item?.submissions)) return item.submissions;\n    if (Array.isArray(item?.body?.submissions)) return item.body.submissions;\n    if (Array.isArray(item?.data?.submissions)) return item.data.submissions;\n    if (Array.isArray(item?.json?.submissions)) return item.json.submissions;\n  }\n  // B) raw array as first item\n  if (Array.isArray(IN[0]) && IN[0].length && looksLikeSubmission(IN[0][0])) return IN[0];\n  // C) any incoming item is a raw array\n  for (const item of IN) {\n    if (Array.isArray(item) && item.length && looksLikeSubmission(item[0])) return item;\n  }\n  // D) single submission object (rare)\n  for (const item of IN) {\n    if (looksLikeSubmission(item)) return [item];\n  }\n  return [];\n}\n\nconst submissions = extractArrayPayload();\n\nif (!submissions.length) {\n  // Don’t throw—emit a single diagnostic item to keep the workflow moving.\n  const dbg = {\n    incomingItemCount: IN.length,\n    firstItemType: Array.isArray(IN[0]) ? 'array' : typeof IN[0],\n    firstItemKeys: IN[0] && typeof IN[0] === 'object' ? Object.keys(IN[0]) : null,\n  };\n  console.warn('No submissions array found. Debug:', dbg);\n  return [{ json: { _parseWarning: 'No submissions found', _debug: dbg, _needsFallback: true } }];\n}\n\n// Normalize each submission\nconst out = submissions.map((s, idx) => {\n  // Robust extraction: try multiple places/names\n  const requestId =\n    s.requestId ?? s.request_id ??\n    get(s, 'bria.requestId') ?? get(s, 'bria.request_id') ??\n    get(s, 'data.requestId') ?? get(s, 'data.request_id') ??\n    get(s, 'result.requestId') ?? get(s, 'result.request_id');\n\n  const statusUrl =\n    s.statusUrl ?? s.status_url ??\n    get(s, 'bria.statusUrl') ?? get(s, 'bria.status_url') ??\n    get(s, 'data.statusUrl') ?? get(s, 'data.status_url') ??\n    get(s, 'result.statusUrl') ?? get(s, 'result.status_url') ??\n    get(s, 'links.status') ?? get(s, 'links.poll');\n\n  const poseNumber = s.poseNumber ?? s.currentPoseNumber ?? s.pose ?? idx + 1;\n\n  const characterPath = s.characterPath ?? get(s, 'meta.characterPath') ?? null;\n  const fallbackBase64 = s.fallbackBase64 ?? null;\n\n  const submittedAt = s.submittedAt ?? new Date().toISOString();\n  const failed = !!s.failed;\n\n  const needsFallback = !(requestId && statusUrl);\n\n  return {\n    json: {\n      // Required downstream schema\n      requestId: requestId || null,\n      statusUrl: statusUrl || null,\n      poseNumber,\n      characterHash: s.characterHash ?? null,\n      characterPath,\n      fallbackBase64,\n      submittedAt,\n      failed: failed || needsFallback,\n      _needsFallback: needsFallback,\n\n      // carry through minimal debug keys if present in payload (optional)\n      __debug_bria_keys: s.__debug_bria_keys,\n      __debug_bria_data_keys: s.__debug_bria_data_keys,\n      __debug_bria_result_keys: s.__debug_bria_result_keys,\n      __debug_bria_links_keys: s.__debug_bria_links_keys\n    }\n  };\n});\n\nconst withIds = out.filter(i => i.json.requestId && i.json.statusUrl).length;\nconst withoutIds = out.length - withIds;\nconsole.log(`Parse Submissions: ${out.length} item(s). With IDs: ${withIds}. Without IDs (will fallback): ${withoutIds}.`);\n\nreturn out;\n"
      },
      "id": "519ac83c-5d70-499c-acf7-db3c15b2425b",
      "name": "Parse Submissions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2016,
        368
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst out = [];\n\nasync function fetchBinary(url, filename, mime='image/png') {\n  const buf = await this.helpers.request({ method:'GET', url, encoding:null, gzip:true });\n  return this.helpers.prepareBinaryData(buf, filename, mime);\n}\n\nfunction pickResultUrl(res) {\n  // Try common Bria shapes; add more if your payload differs\n  return (\n    res?.result?.image_url || res?.result?.url ||\n    res?.output?.image_url || res?.output?.url ||\n    res?.data?.image_url   || res?.data?.url   ||\n    res?.image_url         || res?.url         || null\n  );\n}\n\nfor (const item of items) {\n  const j = { ...item.json };\n  const token = j.API_TOKEN || '';\n  const statusUrl = j.statusUrl;\n\n  if (!statusUrl) {\n    out.push({ json: { ...j, status:'NO_STATUS_URL', briaCompleted:false, error:'Missing statusUrl' }});\n    continue;\n  }\n  if (!token) {\n    out.push({ json: { ...j, status:'NO_TOKEN', briaCompleted:false, error:'Missing API token' }});\n    continue;\n  }\n\n  try {\n    const res = await this.helpers.request({\n      method: 'GET',\n      url: statusUrl,\n      headers: { api_token: token },\n      json: true,\n    });\n\n    const s = String(res.status || res.state || res.result?.status || '').toUpperCase();\n    const completed = ['COMPLETED','SUCCEEDED','DONE'].includes(s);\n\n    if (completed) {\n      const url = pickResultUrl(res);\n      if (url) {\n        const bin = await fetchBinary.call(this, url, `pose_${j.poseNumber ?? 0}_bria.png`);\n        out.push({ json: { ...j, status:s, briaCompleted:true, resultUrl:url }, binary: { data: bin }});\n      } else {\n        // Leave raw status to help you discover the correct field name\n        out.push({ json: { ...j, status:s, briaCompleted:true, error:'Completed but no result URL found', rawStatus:res }});\n      }\n      continue;\n    }\n\n    // Not completed yet – let your If/Retry logic handle it\n    out.push({ json: { ...j, status:s || 'UNKNOWN', briaCompleted:false, rawStatus:res }});\n  } catch (e) {\n    out.push({ json: { ...j, status:'POLL_ERROR', briaCompleted:false, error:`${e.statusCode||''} ${e.message||e}` }});\n  }\n}\n\nreturn out;\n"
      },
      "id": "5cbd70a8-05a2-4f49-ac0c-8d5d3df2128e",
      "name": "Poll Status & Retrieve",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        368
      ],
      "notes": "Polls all statuses and downloads completed images"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status || ''}}",
              "value2": "IN_PROGRESS"
            }
          ]
        }
      },
      "id": "339e7f6d-9d5c-48a8-a18b-fd0c32c27b18",
      "name": "Check Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1248,
        368
      ],
      "notes": "Split completed vs in-progress items"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.retryCount }}",
              "value2": 5
            }
          ]
        }
      },
      "id": "481b0c52-9103-48d5-8b3d-6bab4d68c826",
      "name": "Check Retry Limit",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -880,
        144
      ],
      "notes": "Max 5 retries per image"
    },
    {
      "parameters": {
        "jsCode": "// Calculate exponential backoff delay\nconst items = $input.all();\nconst retryCount = items[0]?.json.retryCount || 1;\n\n// Exponential backoff: 30s, 60s, 90s, 120s, 180s\nconst baseDelay = 30;\nconst delay = Math.min(baseDelay * Math.pow(1.5, retryCount - 1), 180);\n\nconsole.log(`=== RETRY NEEDED ===`);\nconsole.log(`Items to retry: ${items.length}`);\nconsole.log(`Retry attempt: ${retryCount}`);\nconsole.log(`Waiting ${delay} seconds before retry`);\nconsole.log(`==================`);\n\nreturn [{\n  json: {\n    submissions: items.map(i => i.json),\n    retryDelay: delay,\n    retryAttempt: retryCount,\n    totalSubmissions: items.length\n  }\n}];"
      },
      "id": "5cbf8d17-8910-4944-97e2-749225ab80d0",
      "name": "Calculate Retry Delay",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        48
      ],
      "notes": "Exponential backoff: 30s, 60s, 90s, 120s, 180s"
    },
    {
      "parameters": {
        "amount": "={{ $json.retryDelay }}",
        "unit": "seconds"
      },
      "id": "cc4a5def-c4be-495e-957c-9511eb19b8b0",
      "name": "Wait Before Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -432,
        48
      ],
      "webhookId": "wait-retry-delay"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://thepeakbeyond.app.n8n.cloud/webhook/bria-workflow-b",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "submissions",
              "value": "={{ $json.submissions }}"
            },
            {
              "name": "totalSubmissions",
              "value": "={{ $json.totalSubmissions }}"
            },
            {
              "name": "retryAttempt",
              "value": "={{ $json.retryAttempt }}"
            }
          ]
        },
        "options": {}
      },
      "id": "407c2598-c609-46e9-94ee-c5b3b3e3167e",
      "name": "Retry Workflow B",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -208,
        48
      ],
      "notes": "Recursively call this workflow for in-progress items"
    },
    {
      "parameters": {
        "jsCode": "// Max retries exceeded - use fallback images\nconst items = $input.all();\nconst results = [];\n\nconsole.log(`Max retries exceeded for ${items.length} items - using fallbacks`);\n\nfor (const item of items) {\n  const data = item.json;\n  \n  const buffer = Buffer.from(data.originalImageData, 'base64');\n  const binary = await this.helpers.prepareBinaryData(\n    buffer,\n    `pose_${data.poseNumber}_fallback.png`,\n    'image/png'\n  );\n  \n  results.push({\n    json: {\n      ...data,\n      status: 'MAX_RETRIES_FALLBACK',\n      briaCompleted: false,\n      reason: 'Maximum retry attempts exceeded',\n      retrievedAt: new Date().toISOString()\n    },\n    binary: { data: binary }\n  });\n}\n\nreturn results;"
      },
      "id": "80de970f-2ec8-4e84-9108-e084df36b5ed",
      "name": "Use Fallback (Max Retries)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        240
      ],
      "notes": "After 5 retries, use original image"
    },
    {
      "parameters": {},
      "id": "1039b003-3489-42ad-b2a6-d0cbb6317862",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -176,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final summary and validation\nconst allItems = $input.all();\n\nconst summary = {\n  total: allItems.length,\n  completed: allItems.filter(i => i.json.briaCompleted === true).length,\n  fallbacks: allItems.filter(i => i.json.briaCompleted === false).length,\n  completedAt: new Date().toISOString()\n};\n\nconsole.log('=== WORKFLOW B COMPLETE ===');\nconsole.log(`Total images: ${summary.total}`);\nconsole.log(`Bria processed: ${summary.completed}`);\nconsole.log(`Fallbacks used: ${summary.fallbacks}`);\nconsole.log(`Success rate: ${(summary.completed / summary.total * 100).toFixed(1)}%`);\nconsole.log('===========================');\n\n// Add summary to each item for next workflow step\nreturn allItems.map(item => ({\n  ...item,\n  json: {\n    ...item.json,\n    workflowSummary: summary\n  }\n}));"
      },
      "id": "78c1d875-6386-4573-8ef8-a43938ea9d18",
      "name": "Generate Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        16,
        384
      ]
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "output": "input2"
      },
      "id": "8b7d77ec-64a7-498d-a99b-154c151aff01",
      "name": "Continue to Next Step",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        240,
        384
      ],
      "notes": "All images ready - continue to S3 upload/validation"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ab4fb4f3-cb0f-4bbd-bf2a-24c51e7d8396",
              "name": "API_TOKEN",
              "value": "eb0fed5156c441148c462a74d3f92f00",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1808,
        368
      ],
      "id": "6a6fc42a-259a-472d-9067-3ce876cb0afa",
      "name": "Inject API Token"
    }
  ],
  "pinData": {
    "Webhook Trigger": [
      {
        "json": {
          "headers": {
            "host": "thepeakbeyond.app.n8n.cloud",
            "user-agent": "axios/1.8.3",
            "content-length": "278",
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "accept-encoding": "gzip, br",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "4.182.88.118",
            "cf-ew-via": "15",
            "cf-ipcountry": "DE",
            "cf-ray": "98dc7d3a64663631-FRA",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "x-forwarded-for": "4.182.88.118, 162.158.110.46",
            "x-forwarded-host": "thepeakbeyond.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-3-6db8488cf7-n8pcb",
            "x-is-trusted": "yes",
            "x-real-ip": "4.182.88.118"
          },
          "params": {},
          "query": {},
          "body": {
            "submissions": [
              {
                "poseNumber": 0,
                "characterHash": "nohash",
                "characterPath": "https://pub-92cec53654f84771956bc84dfea65baa.r2.dev/book-mvp-simple-adventure/order-generated-assets/characters/nohash/0.png",
                "failed": true,
                "submittedAt": "2025-10-13T05:28:09.219Z"
              }
            ],
            "totalSubmissions": 1
          },
          "webhookUrl": "https://thepeakbeyond.app.n8n.cloud/webhook/bria-workflow-b",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Submissions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Submissions": {
      "main": [
        [
          {
            "node": "Inject API Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Poll Status & Retrieve": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Check Retry Limit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Retry Limit": {
      "main": [
        [
          {
            "node": "Calculate Retry Delay",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Use Fallback (Max Retries)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Retry Delay": {
      "main": [
        [
          {
            "node": "Wait Before Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Retry": {
      "main": [
        [
          {
            "node": "Retry Workflow B",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Fallback (Max Retries)": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Generate Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary": {
      "main": [
        [
          {
            "node": "Continue to Next Step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inject API Token": {
      "main": [
        [
          {
            "node": "Poll Status & Retrieve",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a95f4a49-2adb-4379-8b9c-74c770d7715b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "010748b7a1466c46dced3f8b2bdbc3bc174722f0672e5a4c9529354f5ff306f8"
  },
  "id": "UwwavojZUJ0pBU4Z",
  "tags": []
}