{
  "name": "3-book-assembly (updated, code nodes)",
  "nodes": [
    {
      "id": "1",
      "name": "Webhook Trigger (Book Assembly)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "parameters": {
        "httpMethod": "POST",
        "path": "book-assembly",
        "responseMode": "onReceived",
        "options": {
          "responseData": "allEntries"
        }
      },
      "webhookId": "ee211ba1-104b-4eb3-a46d-3b42b61c82e3"
    },
    {
      "id": "2",
      "name": "Get Order Ready for Assembly",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        300,
        0
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Get order ready for book assembly (robust Webhook body handling)\n\n// Webhook puts the real payload under .body; if not present, assume it's already flat\nconst input = $input.first().json;\nconst payload = input.body ?? input;\n\n// Pull required fields from either flat or nested orderData\nconst amazonOrderId = payload.amazonOrderId ?? payload.orderData?.amazonOrderId ?? null;\nconst characterHash = payload.characterHash ?? payload.orderData?.characterHash ?? null;\n\n// Optional sections\nconst characterSpecs = payload.characterSpecs ?? payload.orderData?.characterSpecs ?? {};\nconst bookSpecs      = payload.bookSpecs      ?? payload.orderData?.bookSpecs      ?? {};\nconst orderDetails   = payload.orderDetails   ?? payload.orderData?.orderDetails   ?? {};\nconst publicR2Url    = payload.publicR2Url    ?? 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\n\n// Processed images come in flat (2B sends them at top level)\nconst processedImages = payload.processedImages ?? [];\n\n// Validate\nif (!amazonOrderId || !characterHash) {\n  throw new Error('Missing required order data: amazonOrderId or characterHash');\n}\nif (!Array.isArray(processedImages) || processedImages.length === 0) {\n  throw new Error('No processed images received from Workflow 2B');\n}\n\n// Normalize/initialize assembly state\nconst assemblingOrder = {\n  status: 'book_assembly_in_progress',\n  assemblyStartedAt: new Date().toISOString(),\n  pagesGenerated: 0,\n  totalPagesRequired: 14,\n  assemblyProgress: 0,\n\n  amazonOrderId,\n  characterHash,\n  characterSpecs,\n  bookSpecs,\n  orderDetails,\n  publicR2Url,\n\n  processedImages\n};\n\nconsole.log(`Starting book assembly for order: ${amazonOrderId} (images: ${processedImages.length})`);\nreturn [{ json: assemblingOrder }];\n"
      }
    },
    {
      "id": "3",
      "name": "Load Generated Characters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        600,
        -120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Load all generated character images for the order\nconst order = $input.first().json;\n\nconst publicR2Url   = order.publicR2Url || 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\nconst characterHash = order.characterHash;\n\nif (!characterHash) throw new Error('Character hash is required for loading character images');\nif (!/^[a-f0-9]{16}$/.test(characterHash)) {\n  throw new Error(`Invalid character hash format: ${characterHash}. Expected 16-character hex string.`);\n}\n\n// Base + 12 poses (pages 1..12). Page 13 is animal only; page 14 = flying.\nconst characterImages = {\n  base: `${publicR2Url}/book-mvp-simple-adventure/order-generated-assets/characters/${characterHash}/base-character.png`,\n  poses: []\n};\n\nconst poseName = {\n  1:'walking', 2:'walking-looking-higher', 3:'looking', 4:'floating',\n  5:'walking-looking-down', 6:'jogging', 7:'looking', 8:'sitting-eating',\n  9:'crouching', 10:'crawling-moving-happy', 11:'surprised-looking-up', 12:'surprised'\n};\n\nfor (let i=1;i<=12;i++){\n  const imagePath = `${publicR2Url}/book-mvp-simple-adventure/order-generated-assets/characters/${characterHash}/characters_${characterHash}_pose${String(i).padStart(2,'0')}.png`;\n  characterImages.poses.push({\n    poseNumber: i,\n    poseFilename: poseName[i],\n    imagePath,\n    pageNumber: i,\n    validated: false\n  });\n}\n\nconsole.log(`Loaded ${characterImages.poses.length} character poses for ${characterHash}`);\nreturn [{ json: { ...order, characterImages, publicR2Url } }];\n"
      }
    },
    {
      "id": "4",
      "name": "Load Background Images",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        600,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Load background images for all 14 pages\nconst order = $input.first().json;\nconst publicR2Url = order.publicR2Url || 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\n\nif (!order.amazonOrderId) throw new Error('Amazon Order ID is required for loading background images');\n\nconst sceneSlugs = [\n  'twilight-walk','night-forest','magic-doorway','courage-leap','morning-meadow',\n  'tall-forest','mountain-vista','picnic-surprise','beach-discovery','crystal-cave',\n  'giant-flowers','almost-there','animal-reveal','flying-home'\n];\n\nconst sceneNames = [\n  'twilight_walk','night_forest','magic_doorway','courage_leap','morning_meadow',\n  'tall_forest','mountain_vista','picnic_surprise','beach_discovery','crystal_cave',\n  'giant_flowers','enchanted_grove','animal_reveal','flying_home'\n];\n\nconst backgroundImages = [];\nfor (let i=1;i<=14;i++){\n  const imagePath = `${publicR2Url}/book-mvp-simple-adventure/backgrounds/page${String(i).padStart(2,'0')}-${sceneSlugs[i-1]}.png`;\n  backgroundImages.push({\n    pageNumber: i,\n    imagePath,\n    sceneName: sceneNames[i-1],\n    validated: false\n  });\n}\n\nif (backgroundImages.length !== 14) throw new Error('Expected 14 background images');\n\nconsole.log(`Loaded ${backgroundImages.length} backgrounds`);\nreturn [{ json: { ...order, backgroundImages } }];\n"
      }
    },
    {
      "id": "5",
      "name": "Load Story Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        900,
        0
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Load story text for all pages with personalization\nconst order = $input.first().json;\nconst childName = order.characterSpecs?.childName;\nconst hometown  = order.characterSpecs?.hometown || 'Seattle';\n\nif (!childName) throw new Error('Child name required (characterSpecs.childName)');\n\nconst lines = [\n  `It was a nice night in ${hometown}. ${childName} went outside.`,\n  `${childName} looked at the stars.<br>You like to explore, the voice said.`,\n  `There was a doorway! ${childName} walked through.`,\n  `Stars were all around! ${childName} felt brave.`,\n  `${childName} noticed footprints and followed them.`,\n  `The path went through giant trees. ${childName} felt small, but not scared.`,\n  `Look how far you came, the voice said.`,\n  `Lunch was waiting! ${childName} ate happily.<br>You earned this, the voice said.`,\n  `The path became warm sand. Look down there, the voice said.<br>${childName} found a beautiful shell!`,\n  `${childName} found a cave with sparkly crystals! They glowed with rainbow colors. You can find beauty everywhere, the voice said.`,\n  `The path went through giant flowers. The petals were SO big!<br>You make others happy, the voice said.`,\n  `The voice felt very close now. You are perfect just as you are, it said.<br>${childName} looked around. Where was the voice?`,\n  `Tiger appeared! It was the voice!<br>I have been with you this whole time, said Tiger.`,\n  `Ready to fly home? asked Tiger. They flew through the stars to ${hometown}.<br>I am always in your heart, said Tiger.`\n];\n\nconst storyTexts = lines.map((text, i) => ({\n  pageNumber: i+1, text, characterName: childName, hometown, validated: true\n}));\n\nreturn [{ json: { ...order, storyTexts } }];\n"
      }
    },
    {
      "id": "6",
      "name": "Generate Complete HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1200,
        0
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Generate complete multi-page HTML document for PDF generation (8.5x8.5 @ 300DPI)\nconst order = $input.first().json;\n\nconsole.log('Order data keys:', Object.keys(order));\nconsole.log('Character images:', order.characterImages?.poses?.length || 'MISSING');\nconsole.log('Background images:', order.backgroundImages?.length || 'MISSING');\nconsole.log('Story texts:', order.storyTexts?.length || 'MISSING');\n\nconst publicR2Url = order.publicR2Url || 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\n\nlet pagesHTML = '';\nlet pageCSS = '';\n\nfor (let i=1;i<=14;i++){\n  const pageData = {\n    pageNumber: i,\n    characterImage: order.characterImages?.poses?.find(p => p.pageNumber === i) || null,\n    backgroundImage: order.backgroundImages?.find(b => b.pageNumber === i),\n    storyText: order.storyTexts?.find(s => s.pageNumber === i),\n    layout: getPageLayout(i),\n    lightingData: getLightingData(i),\n    poseFilename: getPoseFilename(i)\n  };\n\n  pageCSS  += generatePageCSS(pageData);\n  pagesHTML += generatePageHTML(pageData, publicR2Url);\n}\n\nconst completeHTML = `<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Little Hero Book - ${order.characterSpecs?.childName || ''}</title>\n<style>\n  @page { size: 2550px 2550px !important; margin: 0 !important; }\n  * { margin:0 !important; padding:0 !important; box-sizing:border-box; }\n  html, body { width:2550px !important; height:2550px !important; overflow:hidden; }\n  .book-page { width:2550px !important; height:2550px !important; position:relative;\n               page-break-after:always !important; background-size:2550px 2550px !important;\n               background-position:center !important; background-repeat:no-repeat !important; }\n\n  .text-box { position:absolute; left:50%; bottom:3%; width:80%; transform:translateX(-50%);\n              background-image:url('${publicR2Url}/book-mvp-simple-adventure/overlays/text-boxes/standard-box.png');\n              background-size:100% 100%; padding:120px 240px; display:flex; align-items:center; justify-content:center; min-height:400px; }\n  .text-content { font-size:60px !important; line-height:1.3; letter-spacing:2px; color:#312116; text-align:center; width:100%; }\n\n  .character { position:absolute !important; z-index:100 !important; }\n  .character img { width:100% !important; height:auto !important; mix-blend-mode:multiply; filter:contrast(1.1) brightness(0.95); opacity:0.9; }\n\n  ${pageCSS}\n</style>\n</head>\n<body>\n${pagesHTML}\n</body>\n</html>`;\n\nconst result = {\n  ...order,\n  completeHTML,\n  totalPages: 14,\n  generatedAt: new Date().toISOString()\n};\n\nconsole.log('HTML length:', completeHTML.length);\nreturn [{ json: result }];\n\n// Helpers\nfunction generatePageCSS(p){\n  return `\n#page-${p.pageNumber}{\n  background-image:url('${p.backgroundImage.imagePath}') !important;\n  background-size:2550px 2550px !important; background-position:center !important; background-repeat:no-repeat !important;\n}\n#page-${p.pageNumber} .character{\n  ${p.layout.character.position} !important;\n  width:${p.layout.character.width}px !important;\n}\n`; }\n\nfunction generatePageHTML(p, base){\n  const charHTML = p.poseFilename && p.characterImage\n    ? `<div class=\"character\" style=\"${p.layout.character.position} width:${p.layout.character.width}px;\">\n         <img src=\"${p.characterImage.imagePath}\" alt=\"Character\">\n       </div>` : '';\n  const animal13 = p.pageNumber === 13\n    ? `<div class=\"animal-guide\" style=\"position:absolute; right:-30%; top:-5%; width:1950px; z-index:90;\">\n         <img src=\"${base}/animals/tiger-appears.png\" alt=\"Animal Guide\">\n       </div>` : '';\n  const animal14 = p.pageNumber === 14\n    ? `<div class=\"animal-guide\" style=\"position:absolute; right:3%; top:8%; width:1650px; z-index:90;\">\n         <img src=\"${base}/animals/tiger-flying.png\" alt=\"Animal Flying\">\n       </div>` : '';\n\n  return `\n<div class=\"book-page\" id=\"page-${p.pageNumber}\">\n  <div class=\"text-box\"><div class=\"text-content\">${p.storyText.text}</div></div>\n  ${charHTML}\n  ${animal13}\n  ${animal14}\n</div>`;\n}\n\nfunction getPageLayout(n){\n  const L = {\n    1:{character:{position:'right:-36%; top:7%; transform:scaleX(1);', width:350}},\n    2:{character:{position:'right:-35%; top:18%; transform:scaleX(-1);', width:300}},\n    3:{character:{position:'right:-19%; top:15%; transform:scaleX(-1);', width:350}},\n    4:{character:{position:'right:-30%; top:-2%; transform:scaleX(1) rotateZ(-15deg);', width:390}},\n    5:{character:{position:'right:-31%; top:14%; transform:scaleX(-1);', width:300}},\n    6:{character:{position:'right:-32%; top:13%; transform:scaleX(1);', width:300}},\n    7:{character:{position:'right:-26%; top:-4%; transform:scaleX(-1);', width:350}},\n    8:{character:{position:'right:-30%; top:0%; transform:scaleX(1);', width:490}},\n    9:{character:{position:'right:-25%; top:8%; transform:scaleX(-1);', width:400}},\n    10:{character:{position:'right:-18%; top:13%; transform:scaleX(-1);', width:500}},\n    11:{character:{position:'right:-57%; top:24.5%; transform:scaleX(1);', width:200}},\n    12:{character:{position:'right:-14%; top:15%; transform:scaleX(-1);', width:350}},\n    13:{character:{position:'right:-25%; top:5%; transform:scaleX(1);', width:390}},\n    14:{character:{position:'right:-5%; top:-5%; transform:scaleX(1);', width:450}}\n  };\n  return L[n] || L[1];\n}\n\nfunction getLightingData(){ return { gradient:'none', blendMode:'none' }; }\nfunction getPoseFilename(n){\n  const M = {1:'walking',2:'walking-looking-higher',3:'looking',4:'floating',5:'walking-looking-down',6:'jogging',7:'looking',8:'sitting-eating',9:'crouching',10:'crawling-moving-happy',11:'surprised-looking-up',12:'surprised',13:null,14:'flying'};\n  return M[n];\n}\n"
      }
    },
    {
      "id": "7",
      "name": "Prepare PDFMonkey Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        -120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Prepare data for PDFMonkey\nconst order = $input.first().json;\n\nconst pdfMonkeyData = {\n  ...order,\n  pdfMonkeyTemplateId: 'YOUR_PDFMONKEY_TEMPLATE_ID',\n  pdfFilename: `complete_book_${order.amazonOrderId}.pdf`,\n  templateData: { html_content: order.completeHTML }\n};\n\nconsole.log(`Prepared PDFMonkey data for ${order.amazonOrderId}`);\nreturn [{ json: pdfMonkeyData }];\n"
      }
    },
    {
      "id": "8",
      "name": "Update Page Progress",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Update assembly progress counters (if generating per-page)\n// For whole-book flow, just pass through\nconst order = $input.first().json;\n\nconst pagesGenerated = (order.pagesGenerated || 0) + 1;\nconst totalPages = order.totalPagesRequired || 14;\nconst progress = Math.round((pagesGenerated / totalPages) * 100);\n\nconst updated = {\n  ...order,\n  pagesGenerated,\n  assemblyProgress: progress,\n  lastPageGenerated: order.currentPageNumber || null,\n  lastPageGeneratedAt: new Date().toISOString()\n};\n\nif (pagesGenerated >= totalPages) {\n  updated.status = 'pages_generated';\n  updated.pagesGeneratedAt = new Date().toISOString();\n  console.log(`All pages generated for order: ${order.amazonOrderId}`);\n} else {\n  console.log(`Page ${updated.lastPageGenerated} generated. Progress: ${progress}%`);\n}\n\nreturn [{ json: updated }];\n"
      }
    },
    {
      "id": "9",
      "name": "Check All Pages Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1800,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "const order = $input.first().json;\n\nif (order.status === 'pages_generated') {\n  const ready = { ...order, status: 'ready_for_compilation', readyForCompilationAt: new Date().toISOString() };\n  console.log(`Order ${order.amazonOrderId} ready for PDF compilation`);\n  return [{ json: ready }];\n} else {\n  console.log(`Order ${order.amazonOrderId} still processing: ${order.assemblyProgress || 0}%`);\n  return [{ json: order }];\n}\n"
      }
    },
    {
      "id": "10",
      "name": "Compile Final Book PDF",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2100,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "// Placeholder compilation step (external merge later)\nconst order = $input.first().json;\nconst publicR2Url = order.publicR2Url || 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\n\nconst compilationResult = {\n  ...order,\n  compilationStartedAt: new Date().toISOString(),\n  compilationCompletedAt: new Date().toISOString(),\n  compilationLog: ['PDF compilation prepared - individual pages available for manual merging'],\n  totalPagesInFinalBook: 14,\n  status: 'final_book_compiled',\n  individualPageUrls: Array.from({length:14}, (_,i)=>({\n    pageNumber: i+1,\n    url: `${publicR2Url}/little-hero-orders/${order.amazonOrderId}/page${i+1}.pdf`\n  }))\n};\n\nconsole.log(`Compilation prepared for ${order.amazonOrderId}`);\nreturn [{ json: compilationResult }];\n"
      }
    },
    {
      "id": "11",
      "name": "Update Order Status Complete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2400,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "const order = $input.first().json;\nconst publicR2Url = order.publicR2Url || 'https://pub-92cec53654f84771956bc84dfea65baa.r2.dev';\n\nconst completed = {\n  ...order,\n  status: 'book_assembly_completed',\n  bookAssemblyCompletedAt: new Date().toISOString(),\n  finalBookUrl: `${publicR2Url}/little-hero-orders/${order.amazonOrderId}/final_book.pdf`,\n  totalAssemblyTime: order.assemblyStartedAt ? (new Date() - new Date(order.assemblyStartedAt)) : null,\n  averageTimePerPage: order.assemblyStartedAt\n    ? Math.round(((new Date() - new Date(order.assemblyStartedAt)) / (order.totalPagesRequired || 14)) / 1000)\n    : null\n};\n\nconsole.log(`Book assembly completed: ${order.amazonOrderId}`);\nreturn [{ json: completed }];\n"
      }
    },
    {
      "id": "12",
      "name": "Log Assembly Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2700,
        120
      ],
      "parameters": {
        "language": "JavaScript",
        "jsCode": "const order = $input.first().json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  workflow: '3-book-assembly-voice-of-wonder',\n  orderId: order.amazonOrderId,\n  status: order.status,\n  pagesGenerated: order.pagesGenerated,\n  totalPagesRequired: order.totalPagesRequired,\n  assemblyProgress: order.assemblyProgress,\n  finalBookUrl: order.finalBookUrl || 'N/A'\n};\n\nconsole.log('Book Assembly Results:', JSON.stringify(logEntry, null, 2));\nreturn [{ json: logEntry }];\n"
      }
    }
  ],
  "connections": {
    "Webhook Trigger (Book Assembly)": {
      "main": [
        [
          {
            "node": "Get Order Ready for Assembly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Ready for Assembly": {
      "main": [
        [
          {
            "node": "Load Generated Characters",
            "type": "main",
            "index": 0
          },
          {
            "node": "Load Background Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Generated Characters": {
      "main": [
        [
          {
            "node": "Load Story Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Background Images": {
      "main": [
        [
          {
            "node": "Load Story Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Story Text": {
      "main": [
        [
          {
            "node": "Generate Complete HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Complete HTML": {
      "main": [
        [
          {
            "node": "Prepare PDFMonkey Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Page Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page Progress": {
      "main": [
        [
          {
            "node": "Check All Pages Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check All Pages Complete": {
      "main": [
        [
          {
            "node": "Compile Final Book PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Final Book PDF": {
      "main": [
        [
          {
            "node": "Update Order Status Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Order Status Complete": {
      "main": [
        [
          {
            "node": "Log Assembly Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "timezone": "America/Los_Angeles"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetup": false,
    "instanceId": "93269514-5c9b-4b00-b834-ba10486d627b"
  },
  "active": false,
  "id": "5476d34b-f142-4e0c-a4ba-f370ade5265b"
}