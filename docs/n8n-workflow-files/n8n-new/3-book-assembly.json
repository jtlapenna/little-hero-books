{
  "name": "3. Book Assembly - Footprints of Wonder",
  "nodes": [
    {
      "id": "1",
      "name": "Get Order Ready for Assembly",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "functionCode": "// Get order ready for book assembly\n// In production, this would query orders with status 'ai_generation_completed'\n// For now, we'll simulate getting an order from the previous workflow\n\nconst orderData = $input.first().json;\n\n// Check if order is ready for book assembly\nif (orderData.status !== 'ready_for_book_assembly') {\n  return []; // Skip if not ready\n}\n\n// Update order status to assembling\nconst assemblingOrder = {\n  ...orderData,\n  status: 'book_assembly_in_progress',\n  assemblyStartedAt: new Date().toISOString(),\n  pagesGenerated: 0,\n  totalPagesRequired: 14, // Updated for new story\n  assemblyProgress: 0\n};\n\nconsole.log(`Starting book assembly for order: ${orderData.amazonOrderId}`);\nreturn [{ json: assemblingOrder }];"
      }
    },
    {
      "id": "2",
      "name": "Load Generated Characters",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "parameters": {
        "functionCode": "// Load all generated character images for the order\nconst orderData = $input.first().json;\n\n// Load base character and all 14 poses\nconst characterImages = {\n  base: `https://little-hero-assets.r2.cloudflarestorage.com/characters/${orderData.characterHash}/base-character.png`,\n  poses: []\n};\n\n// Load all pose images (1-14)\nfor (let i = 1; i <= 14; i++) {\n  characterImages.poses.push({\n    poseNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/characters/${orderData.characterHash}/pose${i.toString().padStart(2, '0')}.png`,\n    pageNumber: i\n  });\n}\n\nconst orderWithCharacters = {\n  ...orderData,\n  characterImages: characterImages\n};\n\nconsole.log(`Loaded ${characterImages.poses.length} character poses for assembly`);\nreturn [{ json: orderWithCharacters }];"
      }
    },
    {
      "id": "3",
      "name": "Load Background Images",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300],
      "parameters": {
        "functionCode": "// Load all background images for the Footprints of Wonder story\nconst orderData = $input.first().json;\n\n// Load background images for all 14 pages\nconst backgroundImages = [];\nfor (let i = 1; i <= 14; i++) {\n  backgroundImages.push({\n    pageNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/backgrounds/page${i}_background.png`,\n    sceneName: getSceneName(i)\n  });\n}\n\nfunction getSceneName(pageNumber) {\n  const scenes = [\n    'garden_path_twilight', 'garden_gate_magical', 'forest_night', 'forest_clearing', 'mountain_dawn',\n    'mountain_ridge', 'flower_garden', 'picnic_surprise', 'beach_sand', 'beach_shells',\n    'meadow_path', 'sunny_clearing', 'magical_meeting', 'sunset_path'\n  ];\n  return scenes[pageNumber - 1] || 'unknown';\n}\n\nconst orderWithBackgrounds = {\n  ...orderData,\n  backgroundImages: backgroundImages\n};\n\nconsole.log(`Loaded ${backgroundImages.length} background images for assembly`);\nreturn [{ json: orderWithBackgrounds }];"
      }
    },
    {
      "id": "4",
      "name": "Load Animal Companions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "parameters": {
        "functionCode": "// Load animal companion images for each page\nconst orderData = $input.first().json;\n\n// Load animal images for all 14 pages\nconst animalImages = [];\nfor (let i = 1; i <= 14; i++) {\n  const animalType = getAnimalType(i);\n  animalImages.push({\n    pageNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/animals/${animalType}_${i}.png`,\n    animalType: animalType\n  });\n}\n\nfunction getAnimalType(pageNumber) {\n  // For Footprints of Wonder, we cycle through the 7 animal options\n  const animals = ['dog', 'cat', 'rabbit', 'tiger', 'owl', 'penguin', 'unicorn'];\n  const selectedAnimal = orderData.characterSpecs.animalGuide || 'dog';\n  \n  // For pages 1-12, use the selected animal (footprints imply presence)\n  // For page 13, show the actual animal reveal\n  // For page 14, show the animal walking home\n  if (pageNumber === 13 || pageNumber === 14) {\n    return selectedAnimal;\n  } else {\n    return selectedAnimal; // Same animal throughout, but only visible on reveal pages\n  }\n}\n\nconst orderWithAnimals = {\n  ...orderData,\n  animalImages: animalImages\n};\n\nconsole.log(`Loaded ${animalImages.length} animal images for assembly`);\nreturn [{ json: orderWithAnimals }];"
      }
    },
    {
      "id": "5",
      "name": "Load Footprint Assets",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "parameters": {
        "functionCode": "// Load footprint assets for each page\nconst orderData = $input.first().json;\n\n// Load footprint images for all 14 pages\nconst footprintImages = [];\nfor (let i = 1; i <= 14; i++) {\n  const animalType = getAnimalType(i);\n  footprintImages.push({\n    pageNumber: i,\n    imagePath: `https://little-hero-assets.r2.cloudflarestorage.com/footprints/${animalType}_footprints.png`,\n    animalType: animalType,\n    hasFootprints: shouldHaveFootprints(i)\n  });\n}\n\nfunction getAnimalType(pageNumber) {\n  // Use the selected animal guide from order data\n  const selectedAnimal = orderData.characterSpecs.animalGuide || 'dog';\n  return selectedAnimal;\n}\n\nfunction shouldHaveFootprints(pageNumber) {\n  // Flexible footprint logic - can be customized per story\n  // For Footprints of Wonder: footprints on most pages except reveal (page 13)\n  const footprintPages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14];\n  return footprintPages.includes(pageNumber);\n}\n\nconst orderWithFootprints = {\n  ...orderData,\n  footprintImages: footprintImages\n};\n\nconsole.log(`Loaded ${footprintImages.length} footprint images for assembly`);\nreturn [{ json: orderWithFootprints }];"
      }
    },
    {
      "id": "6",
      "name": "Load Story Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300],
      "parameters": {
        "functionCode": "// Load story text for all pages with character personalization\nconst orderData = $input.first().json;\n\n// Load story text for all 14 pages\nconst storyTexts = [];\nfor (let i = 1; i <= 14; i++) {\n  storyTexts.push({\n    pageNumber: i,\n    text: getStoryText(i, orderData.characterSpecs.childName),\n    characterName: orderData.characterSpecs.childName\n  });\n}\n\nfunction getStoryText(pageNumber, childName) {\n  const storyLines = [\n    `Tonight the world felt soft and shimmery. On the path outside, ${childName} noticed tiny footprints glowing faintly, as if they were whispering, \"Follow me.\"`,\n    `The footprints curved around the garden gate and into the evening air that hummed with quiet magic. ${childName} took a brave step forward.`,\n    `Trees rose like friendly giants. Between fallen leaves, the footprints continued—steady and sure—leading deeper, as if someone kind was waiting.`,\n    `In a clearing, the footprints paused. ${childName} stood still and listened—the forest sounded like a secret song just for them.`,\n    `Dawn colored the sky as the path tilted upward. Footprints dotted the rocks, each one saying, \"You can do this.\" Step by step, ${childName} climbed.`,\n    `At the ridge, the world opened wide. Wind whooshed past like happy laughter, and the footprints pointed onward with a wink.`,\n    `The trail threaded through a garden bright with blooms. Petals brushed against ${childName} like tiny high-fives, and the footprints curved between colors.`,\n    `On a sunny blanket waited a little treat, just right for sharing and perfectly colorful. ${childName} took a cheerful bite—energy for the adventure!`,\n    `Soon the path became warm, soft sand. The footprints in the sand made a playful zigzag, skipping close to the waves and back again.`,\n    `A curvy line of seashells echoed the footprints' direction. They seemed arranged just so—an encouraging smile in shapes. ${childName} grinned and kept going.`,\n    `Past the dunes, a soft meadow swayed. Footprints crossed the grass in a calm, steady trail, guiding ${childName} toward a warm glow ahead.`,\n    `The footprints circled a sunny patch and stopped. The air felt tingly, like a giggle that hadn't burst yet. Someone wonderful was very, very near.`,\n    `With a happy hush, the animal guide stepped into view—bright eyes, kind heart, and a smile that felt like home. \"I've been with you the whole way,\" it seemed to say.`,\n    `Side by side, they followed the path back. The glowing footprints faded into the evening, but ${childName} knew the feeling would stay.`\n  ];\n  return storyLines[pageNumber - 1] || 'Adventure awaits!';\n}\n\nconst orderWithStory = {\n  ...orderData,\n  storyTexts: storyTexts\n};\n\nconsole.log(`Loaded story text for ${storyTexts.length} pages`);\nreturn [{ json: orderWithStory }];"
      }
    },
    {
      "id": "7",
      "name": "Initialize Page Generation Loop",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "parameters": {
        "functionCode": "// Initialize page generation loop for all 14 pages\nconst orderData = $input.first().json;\n\n// Create array of pages to generate (1-14)\nconst pagesToGenerate = [];\nfor (let i = 1; i <= 14; i++) {\n  const characterImage = orderData.characterImages.poses.find(p => p.pageNumber === i);\n  const backgroundImage = orderData.backgroundImages.find(b => b.pageNumber === i);\n  const animalImage = orderData.animalImages.find(a => a.pageNumber === i);\n  const footprintImage = orderData.footprintImages.find(f => f.pageNumber === i);\n  const storyText = orderData.storyTexts.find(s => s.pageNumber === i);\n  \n  pagesToGenerate.push({\n    ...orderData,\n    currentPageNumber: i,\n    pageStatus: 'pending',\n    pageGenerationAttempts: 0,\n    maxPageAttempts: 3,\n    characterImage: characterImage,\n    backgroundImage: backgroundImage,\n    animalImage: animalImage,\n    footprintImage: footprintImage,\n    storyText: storyText\n  });\n}\n\nconsole.log(`Initialized page generation for ${pagesToGenerate.length} pages`);\nreturn pagesToGenerate.map(page => ({ json: page }));"
      }
    },
    {
      "id": "8",
      "name": "Generate Page HTML",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300],
      "parameters": {
        "functionCode": "// Generate HTML for individual page with dynamic positioning\nconst pageData = $input.first().json;\n\n// Get positioning layout for this page\nconst layout = getPageLayout(pageData.currentPageNumber);\n\n// Create HTML template for the page\nconst htmlTemplate = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Little Hero Book - Page ${pageData.currentPageNumber}</title>\n  <style>\n    @page {\n      size: 8in 10in;\n      margin: 0;\n    }\n    body {\n      margin: 0;\n      padding: 0;\n      font-family: 'Custom Font', Arial, sans-serif;\n    }\n    .page {\n      width: 8in;\n      height: 10in;\n      background-image: url('${pageData.backgroundImage.imagePath}');\n      background-size: cover;\n      background-position: center;\n      background-repeat: no-repeat;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n    }\n    .character {\n      position: absolute;\n      ${layout.character.position};\n      width: ${layout.character.width}px;\n      height: auto;\n      z-index: 100;\n    }\n    .character img {\n      width: 100%;\n      height: auto;\n    }\n    .animal {\n      position: absolute;\n      ${layout.animal.position};\n      width: ${layout.animal.width}px;\n      height: auto;\n      z-index: 90;\n      display: ${layout.animal.visible ? 'block' : 'none'};\n    }\n    .animal img {\n      width: 100%;\n      height: auto;\n    }\n    .footprints {\n      position: absolute;\n      ${layout.footprints.position};\n      width: ${layout.footprints.width}px;\n      height: auto;\n      z-index: 80;\n      display: ${layout.footprints.visible ? 'block' : 'none'};\n    }\n    .footprints img {\n      width: 100%;\n      height: auto;\n    }\n    .text-box {\n      position: absolute;\n      ${layout.text.position};\n      width: ${layout.text.width}%;\n      transform: translateX(-50%);\n      background-image: url('https://little-hero-assets.r2.cloudflarestorage.com/overlays/text-boxes/standard-box.png');\n      background-size: contain;\n      background-repeat: no-repeat;\n      background-position: center;\n      padding: 40px 60px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .text-content {\n      font-size: 20px;\n      line-height: 1.4;\n      letter-spacing: 1.5px;\n      color: #312116;\n      text-align: center;\n      font-weight: 400;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"page\">\n    <div class=\"character\">\n      <img src=\"${pageData.characterImage.imagePath}\" alt=\"Character\">\n    </div>\n    <div class=\"animal\">\n      <img src=\"${pageData.animalImage.imagePath}\" alt=\"Animal\">\n    </div>\n    <div class=\"footprints\">\n      <img src=\"${pageData.footprintImage.imagePath}\" alt=\"Footprints\">\n    </div>\n    <div class=\"text-box\">\n      <div class=\"text-content\">${pageData.storyText.text}</div>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nconst pageResult = {\n  ...pageData,\n  html: htmlTemplate,\n  layout: layout,\n  generatedAt: new Date().toISOString()\n};\n\nconsole.log(`Generated HTML for page ${pageData.currentPageNumber}`);\nreturn [{ json: pageResult }];\n\n// Dynamic positioning function\nfunction getPageLayout(pageNumber) {\n  const layouts = {\n    1: { // Garden path twilight\n      character: { position: 'right: 5%; top: 15%;', width: 300 },\n      animal: { position: 'left: 10%; bottom: 20%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 50%;', width: 150, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    2: { // Garden gate magical\n      character: { position: 'left: 5%; top: 20%;', width: 280 },\n      animal: { position: 'right: 10%; bottom: 25%;', width: 180, visible: false },\n      footprints: { position: 'left: 50%; top: 60%;', width: 200, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    3: { // Forest night\n      character: { position: 'right: 8%; top: 10%;', width: 320 },\n      animal: { position: 'left: 15%; top: 30%;', width: 160, visible: false },\n      footprints: { position: 'left: 50%; top: 70%;', width: 180, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    4: { // Forest clearing\n      character: { position: 'left: 8%; top: 15%;', width: 300 },\n      animal: { position: 'right: 12%; bottom: 30%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 65%;', width: 190, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    5: { // Mountain dawn\n      character: { position: 'right: 6%; top: 18%;', width: 290 },\n      animal: { position: 'left: 8%; bottom: 22%;', width: 210, visible: false },\n      footprints: { position: 'left: 50%; top: 55%;', width: 170, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    6: { // Mountain ridge\n      character: { position: 'left: 6%; top: 12%;', width: 310 },\n      animal: { position: 'right: 8%; bottom: 28%;', width: 190, visible: false },\n      footprints: { position: 'left: 50%; top: 62%;', width: 160, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    7: { // Flower garden\n      character: { position: 'right: 7%; top: 16%;', width: 280 },\n      animal: { position: 'left: 12%; bottom: 24%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 58%;', width: 180, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    8: { // Picnic surprise\n      character: { position: 'left: 7%; top: 14%;', width: 300 },\n      animal: { position: 'right: 10%; bottom: 26%;', width: 180, visible: false },\n      footprints: { position: 'left: 50%; top: 60%;', width: 200, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    9: { // Beach sand\n      character: { position: 'right: 5%; top: 15%;', width: 300 },\n      animal: { position: 'left: 10%; bottom: 20%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 50%;', width: 150, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    10: { // Beach shells\n      character: { position: 'left: 8%; top: 18%;', width: 290 },\n      animal: { position: 'right: 12%; bottom: 30%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 65%;', width: 190, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    11: { // Meadow path\n      character: { position: 'right: 6%; top: 12%;', width: 320 },\n      animal: { position: 'left: 8%; bottom: 28%;', width: 190, visible: false },\n      footprints: { position: 'left: 50%; top: 62%;', width: 160, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    12: { // Sunny clearing\n      character: { position: 'left: 6%; top: 16%;', width: 300 },\n      animal: { position: 'right: 10%; bottom: 24%;', width: 200, visible: false },\n      footprints: { position: 'left: 50%; top: 58%;', width: 180, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    13: { // Magical meeting (animal reveal)\n      character: { position: 'right: 5%; top: 15%;', width: 300 },\n      animal: { position: 'left: 10%; bottom: 20%;', width: 200, visible: true },\n      footprints: { position: 'left: 50%; top: 50%;', width: 150, visible: false },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    },\n    14: { // Sunset path\n      character: { position: 'left: 8%; top: 18%;', width: 290 },\n      animal: { position: 'right: 12%; bottom: 30%;', width: 200, visible: true },\n      footprints: { position: 'left: 50%; top: 65%;', width: 190, visible: true },\n      text: { position: 'left: 50%; bottom: 3%;', width: 65 }\n    }\n  };\n  \n  return layouts[pageNumber] || layouts[1]; // Default to first layout if not found\n}"
      }
    },
    {
      "id": "9",
      "name": "Generate PDF Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2000, 300],
      "parameters": {
        "method": "POST",
        "url": "https://your-renderer-service.com/generate-pdf",
        "options": {
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "html",
              "value": "={{ $json.html }}"
            },
            {
              "name": "pageNumber",
              "value": "={{ $json.currentPageNumber }}"
            },
            {
              "name": "orderId",
              "value": "={{ $json.amazonOrderId }}"
            }
          ]
        }
      }
    },
    {
      "id": "10",
      "name": "Save PDF Page to R2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2220, 300],
      "parameters": {
        "method": "PUT",
        "url": "https://little-hero-assets.r2.cloudflarestorage.com/generated/{{ $json.amazonOrderId }}/page{{ $json.currentPageNumber }}.pdf",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareR2Api",
        "options": {
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/pdf"
              }
            ]
          }
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{ $json.pdfData }}"
            }
          ]
        }
      }
    },
    {
      "id": "11",
      "name": "Update Page Progress",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2440, 300],
      "parameters": {
        "functionCode": "// Update page generation progress\nconst pageData = $input.first().json;\nconst orderData = $('Initialize Page Generation Loop').first().json;\n\n// Calculate progress\nconst pagesGenerated = orderData.pagesGenerated + 1;\nconst totalPages = orderData.totalPagesRequired;\nconst progress = Math.round((pagesGenerated / totalPages) * 100);\n\nconst updatedOrder = {\n  ...orderData,\n  pagesGenerated: pagesGenerated,\n  assemblyProgress: progress,\n  lastPageGenerated: orderData.currentPageNumber,\n  lastPageGeneratedAt: new Date().toISOString()\n};\n\n// Check if all pages are complete\nif (pagesGenerated >= totalPages) {\n  updatedOrder.status = 'pages_generated';\n  updatedOrder.pagesGeneratedAt = new Date().toISOString();\n  console.log(`All pages generated for order: ${orderData.amazonOrderId}`);\n} else {\n  console.log(`Page ${orderData.currentPageNumber} generated. Progress: ${progress}%`);\n}\n\nreturn [{ json: updatedOrder }];"
      }
    },
    {
      "id": "12",
      "name": "Check All Pages Complete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2660, 300],
      "parameters": {
        "functionCode": "// Check if all pages have been generated successfully\nconst orderData = $input.first().json;\n\nif (orderData.status === 'pages_generated') {\n  // All pages generated successfully, proceed to compilation\n  const readyForCompilation = {\n    ...orderData,\n    status: 'ready_for_compilation',\n    readyForCompilationAt: new Date().toISOString()\n  };\n  \n  console.log(`Order ${orderData.amazonOrderId} ready for PDF compilation`);\n  return [{ json: readyForCompilation }];\n} else {\n  // Still processing\n  console.log(`Order ${orderData.amazonOrderId} still processing: ${orderData.assemblyProgress}% complete`);\n  return [{ json: orderData }];\n}"
      }
    },
    {
      "id": "13",
      "name": "Compile Final Book PDF",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2880, 300],
      "parameters": {
        "functionCode": "// Compile all individual page PDFs into final book\nconst orderData = $input.first().json;\n\n// Load all generated page PDFs from R2\nconst pagePDFs = [];\nfor (let i = 1; i <= 14; i++) {\n  pagePDFs.push({\n    pageNumber: i,\n    pdfPath: `https://little-hero-assets.r2.cloudflarestorage.com/generated/${orderData.amazonOrderId}/page${i}.pdf`\n  });\n}\n\n// In production, this would use a PDF merging library like PDF-lib\n// For now, we'll simulate the compilation process\nconst compilationResult = {\n  ...orderData,\n  pagePDFs: pagePDFs,\n  finalBookPath: `https://little-hero-assets.r2.cloudflarestorage.com/books/${orderData.amazonOrderId}_final.pdf`,\n  compilationStartedAt: new Date().toISOString()\n};\n\nconsole.log(`Compiling final book PDF for order: ${orderData.amazonOrderId}`);\nreturn [{ json: compilationResult }];"
      }
    },
    {
      "id": "14",
      "name": "Upload Final Book to Storage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [3100, 300],
      "parameters": {
        "method": "PUT",
        "url": "https://{{ $credentials.r2Bucket }}.r2.cloudflarestorage.com/books/{{ $json.amazonOrderId }}_final.pdf",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareR2Api",
        "options": {
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/pdf"
              }
            ]
          }
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{ $json.finalBookData }}"
            }
          ]
        }
      }
    },
    {
      "id": "15",
      "name": "Update Order Status Complete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [3320, 300],
      "parameters": {
        "functionCode": "// Update order status to completed\nconst orderData = $input.first().json;\n\nconst completedOrder = {\n  ...orderData,\n  status: 'book_assembly_completed',\n  bookAssemblyCompletedAt: new Date().toISOString(),\n  finalBookUrl: `https://${orderData.r2Bucket}.r2.cloudflarestorage.com/books/${orderData.amazonOrderId}_final.pdf`,\n  totalAssemblyTime: new Date(orderData.bookAssemblyCompletedAt) - new Date(orderData.assemblyStartedAt),\n  averageTimePerPage: Math.round((new Date(orderData.bookAssemblyCompletedAt) - new Date(orderData.assemblyStartedAt)) / orderData.totalPagesRequired / 1000) // seconds\n};\n\nconsole.log(`Book assembly completed for order: ${orderData.amazonOrderId}`);\nreturn [{ json: completedOrder }];"
      }
    },
    {
      "id": "16",
      "name": "Log Assembly Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [3320, 500],
      "parameters": {
        "functionCode": "// Log assembly results for monitoring\nconst orderData = $input.first().json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  workflow: '3-book-assembly',\n  orderId: orderData.amazonOrderId,\n  status: orderData.status,\n  pagesGenerated: orderData.pagesGenerated,\n  totalPagesRequired: orderData.totalPagesRequired,\n  assemblyProgress: orderData.assemblyProgress,\n  currentPageNumber: orderData.currentPageNumber,\n  pageStatus: orderData.pageStatus,\n  assemblyTime: orderData.totalAssemblyTime || 'N/A',\n  averageTimePerPage: orderData.averageTimePerPage || 'N/A',\n  finalBookUrl: orderData.finalBookUrl || 'N/A'\n};\n\n// In production, this would write to a proper logging system\nconsole.log('Book Assembly Results:', JSON.stringify(logEntry, null, 2));\n\nreturn [{ json: logEntry }];"
      }
    }
  ],
  "connections": {
    "Get Order Ready for Assembly": {
      "main": [
        [
          {
            "node": "Load Generated Characters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Generated Characters": {
      "main": [
        [
          {
            "node": "Load Background Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Background Images": {
      "main": [
        [
          {
            "node": "Load Animal Companions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Animal Companions": {
      "main": [
        [
          {
            "node": "Load Footprint Assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Footprint Assets": {
      "main": [
        [
          {
            "node": "Load Story Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Story Text": {
      "main": [
        [
          {
            "node": "Initialize Page Generation Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Page Generation Loop": {
      "main": [
        [
          {
            "node": "Generate Page HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Page HTML": {
      "main": [
        [
          {
            "node": "Generate PDF Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF Page": {
      "main": [
        [
          {
            "node": "Save PDF Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save PDF Page": {
      "main": [
        [
          {
            "node": "Update Page Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page Progress": {
      "main": [
        [
          {
            "node": "Check All Pages Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check All Pages Complete": {
      "main": [
        [
          {
            "node": "Compile Final Book PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Final Book PDF": {
      "main": [
        [
          {
            "node": "Upload Final Book to Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Final Book to Storage": {
      "main": [
        [
          {
            "node": "Update Order Status Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Order Status Complete": {
      "main": [
        [
          {
            "node": "Log Assembly Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}